// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/protobuf-spec/frontend.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Frontend service

type FrontendClient interface {
	// CreatePlayer will put the player  in state storage, and then look
	// through the 'properties' field for the attributes you have defined as
	// indices your matchmaker config.  If the attributes exist and are valid
	// integers, they will be indexed.
	// INPUT: Player message with these fields populated:
	//  - id
	//  - properties
	// OUTPUT: Result message denoting success or failure (and an error if
	// necessary)
	CreatePlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Result, error)
	// DeletePlayer removes the player from state storage by doing the
	// following:
	//  1) Delete player from configured indices.  This effectively removes the
	//     player from matchmaking when using recommended MMF patterns.
	//     Everything after this is just cleanup to save stage storage space.
	//  2) 'Lazily' delete the player's state storage record.  This is kicked
	//     off in the background and may take some time to complete.
	//  2) 'Lazily' delete the player's metadata indicies (like, the timestamp when
	//     they called CreatePlayer, and the last time the record was accessed).  This
	//     is also kicked off in the background and may take some time to complete.
	// INPUT: Player message with the 'id' field populated.
	// OUTPUT: Result message denoting success or failure (and an error if
	// necessary)
	DeletePlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Result, error)
	// GetResults streams matchmaking results from Open Match for the
	// provided player ID.
	// INPUT: Player message with the 'id' field populated.
	// OUTPUT: a stream of player objects with one or more of the following
	// fields populated, if an update is seen in state storage:
	//  - 'assignment': string that usually contains game server connection information.
	//  - 'status': string to communicate current matchmaking status to the client.
	//  - 'error': string to pass along error information to the client.
	//
	// During normal operation, the expectation is that the player's 'assignment' field
	// will be updated by a Backend process calling the 'CreateAssignments' Backend API
	// endpoint.  'Status' and 'Error' are free for developers to use as they see fit.
	// Even if you had multiple players enter a matchmaking request as a group, the
	// Backend API 'CreateAssignments' call will write the results to state
	// storage separately under each player's ID. OM expects you to make all game
	// clients 'GetResults' with their own ID from the Frontend API to get
	// their results.
	//
	// NOTE: This call generates a small amount of load on the Frontend API and state
	//  storage while watching the player record for updates. You are expected
	//  to close the stream from your client after receiving your matchmaking
	//  results (or a reasonable timeout), or you will continue to
	//  generate load on OM until you do!
	// NOTE: Just bear in mind that every update will send egress traffic from
	//  Open Match to game clients! Frugality is recommended.
	GetPlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (Frontend_GetPlayerClient, error)
}

type frontendClient struct {
	cc *grpc.ClientConn
}

func NewFrontendClient(cc *grpc.ClientConn) FrontendClient {
	return &frontendClient{cc}
}

func (c *frontendClient) CreatePlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.Frontend/CreatePlayer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) DeletePlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.Frontend/DeletePlayer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) GetPlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (Frontend_GetPlayerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Frontend_serviceDesc.Streams[0], c.cc, "/api.Frontend/GetPlayer", opts...)
	if err != nil {
		return nil, err
	}
	x := &frontendGetPlayerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Frontend_GetPlayerClient interface {
	Recv() (*Player, error)
	grpc.ClientStream
}

type frontendGetPlayerClient struct {
	grpc.ClientStream
}

func (x *frontendGetPlayerClient) Recv() (*Player, error) {
	m := new(Player)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Frontend service

type FrontendServer interface {
	// CreatePlayer will put the player  in state storage, and then look
	// through the 'properties' field for the attributes you have defined as
	// indices your matchmaker config.  If the attributes exist and are valid
	// integers, they will be indexed.
	// INPUT: Player message with these fields populated:
	//  - id
	//  - properties
	// OUTPUT: Result message denoting success or failure (and an error if
	// necessary)
	CreatePlayer(context.Context, *Player) (*Result, error)
	// DeletePlayer removes the player from state storage by doing the
	// following:
	//  1) Delete player from configured indices.  This effectively removes the
	//     player from matchmaking when using recommended MMF patterns.
	//     Everything after this is just cleanup to save stage storage space.
	//  2) 'Lazily' delete the player's state storage record.  This is kicked
	//     off in the background and may take some time to complete.
	//  2) 'Lazily' delete the player's metadata indicies (like, the timestamp when
	//     they called CreatePlayer, and the last time the record was accessed).  This
	//     is also kicked off in the background and may take some time to complete.
	// INPUT: Player message with the 'id' field populated.
	// OUTPUT: Result message denoting success or failure (and an error if
	// necessary)
	DeletePlayer(context.Context, *Player) (*Result, error)
	// GetResults streams matchmaking results from Open Match for the
	// provided player ID.
	// INPUT: Player message with the 'id' field populated.
	// OUTPUT: a stream of player objects with one or more of the following
	// fields populated, if an update is seen in state storage:
	//  - 'assignment': string that usually contains game server connection information.
	//  - 'status': string to communicate current matchmaking status to the client.
	//  - 'error': string to pass along error information to the client.
	//
	// During normal operation, the expectation is that the player's 'assignment' field
	// will be updated by a Backend process calling the 'CreateAssignments' Backend API
	// endpoint.  'Status' and 'Error' are free for developers to use as they see fit.
	// Even if you had multiple players enter a matchmaking request as a group, the
	// Backend API 'CreateAssignments' call will write the results to state
	// storage separately under each player's ID. OM expects you to make all game
	// clients 'GetResults' with their own ID from the Frontend API to get
	// their results.
	//
	// NOTE: This call generates a small amount of load on the Frontend API and state
	//  storage while watching the player record for updates. You are expected
	//  to close the stream from your client after receiving your matchmaking
	//  results (or a reasonable timeout), or you will continue to
	//  generate load on OM until you do!
	// NOTE: Just bear in mind that every update will send egress traffic from
	//  Open Match to game clients! Frugality is recommended.
	GetPlayer(*Player, Frontend_GetPlayerServer) error
}

func RegisterFrontendServer(s *grpc.Server, srv FrontendServer) {
	s.RegisterService(&_Frontend_serviceDesc, srv)
}

func _Frontend_CreatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).CreatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Frontend/CreatePlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).CreatePlayer(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_DeletePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).DeletePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Frontend/DeletePlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).DeletePlayer(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_GetPlayer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Player)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FrontendServer).GetPlayer(m, &frontendGetPlayerServer{stream})
}

type Frontend_GetPlayerServer interface {
	Send(*Player) error
	grpc.ServerStream
}

type frontendGetPlayerServer struct {
	grpc.ServerStream
}

func (x *frontendGetPlayerServer) Send(m *Player) error {
	return x.ServerStream.SendMsg(m)
}

var _Frontend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Frontend",
	HandlerType: (*FrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlayer",
			Handler:    _Frontend_CreatePlayer_Handler,
		},
		{
			MethodName: "DeletePlayer",
			Handler:    _Frontend_DeletePlayer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPlayer",
			Handler:       _Frontend_GetPlayer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/protobuf-spec/frontend.proto",
}

func init() { proto.RegisterFile("api/protobuf-spec/frontend.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0xcf, 0xb1, 0x4e, 0x85, 0x30,
	0x14, 0xc6, 0x71, 0x88, 0x89, 0xd1, 0xc6, 0xc1, 0x30, 0x32, 0x19, 0x76, 0xa8, 0x11, 0x8d, 0xbb,
	0x18, 0x59, 0x89, 0xa3, 0xdb, 0x29, 0x1c, 0xa0, 0x49, 0xdb, 0xd3, 0xb4, 0xa7, 0x83, 0xcf, 0xe4,
	0x4b, 0x1a, 0xc1, 0xdc, 0xdc, 0xe1, 0x0e, 0xf7, 0xae, 0xff, 0x7c, 0xbf, 0xe1, 0x13, 0x0f, 0xe0,
	0xb5, 0xf4, 0x81, 0x98, 0x54, 0x9a, 0xeb, 0xe8, 0x71, 0x94, 0x73, 0x20, 0xc7, 0xe8, 0xa6, 0x66,
	0xcb, 0xc5, 0x15, 0x78, 0x5d, 0x9e, 0x98, 0x59, 0x8c, 0x11, 0x16, 0x8c, 0xfb, 0xec, 0xe9, 0x27,
	0x17, 0x37, 0x1f, 0xff, 0xb2, 0x78, 0x16, 0x77, 0x5d, 0x40, 0x60, 0x1c, 0x0c, 0x7c, 0x63, 0x28,
	0xee, 0x9b, 0xc3, 0x7a, 0x2f, 0xe5, 0x51, 0xf9, 0xc4, 0x98, 0x0c, 0x57, 0xd9, 0x9f, 0x7a, 0x47,
	0x83, 0x17, 0xaa, 0x56, 0xdc, 0xf6, 0xc8, 0xe7, 0x90, 0xbd, 0x54, 0xd9, 0x63, 0xfe, 0xf6, 0xfa,
	0xf5, 0xb2, 0x68, 0x5e, 0x93, 0x6a, 0x46, 0xb2, 0xb2, 0x27, 0x5a, 0x0c, 0x76, 0x86, 0xd2, 0x34,
	0x18, 0xe0, 0x99, 0x82, 0x95, 0xe4, 0xd1, 0xd5, 0x16, 0x78, 0x5c, 0xa5, 0x76, 0x8c, 0xc1, 0x81,
	0x91, 0x5e, 0xa9, 0xeb, 0xed, 0x6d, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x44, 0x87, 0x56, 0x93,
	0x38, 0x01, 0x00, 0x00,
}
