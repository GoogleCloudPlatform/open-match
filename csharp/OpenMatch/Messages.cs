// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: api/messages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OpenMatch {

  /// <summary>Holder for reflection information generated from api/messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for api/messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJhcGkvbWVzc2FnZXMucHJvdG8SCW9wZW5tYXRjaBoXZ29vZ2xlL3JwYy9z",
            "dGF0dXMucHJvdG8aGWdvb2dsZS9wcm90b2J1Zi9hbnkucHJvdG8i9QEKBlRp",
            "Y2tldBIKCgJpZBgBIAEoCRIpCgphc3NpZ25tZW50GAMgASgLMhUub3Blbm1h",
            "dGNoLkFzc2lnbm1lbnQSLgoNc2VhcmNoX2ZpZWxkcxgEIAEoCzIXLm9wZW5t",
            "YXRjaC5TZWFyY2hGaWVsZHMSNQoKZXh0ZW5zaW9ucxgFIAMoCzIhLm9wZW5t",
            "YXRjaC5UaWNrZXQuRXh0ZW5zaW9uc0VudHJ5GkcKD0V4dGVuc2lvbnNFbnRy",
            "eRILCgNrZXkYASABKAkSIwoFdmFsdWUYAiABKAsyFC5nb29nbGUucHJvdG9i",
            "dWYuQW55OgI4AUoECAIQAyL+AQoMU2VhcmNoRmllbGRzEjwKC2RvdWJsZV9h",
            "cmdzGAEgAygLMicub3Blbm1hdGNoLlNlYXJjaEZpZWxkcy5Eb3VibGVBcmdz",
            "RW50cnkSPAoLc3RyaW5nX2FyZ3MYAiADKAsyJy5vcGVubWF0Y2guU2VhcmNo",
            "RmllbGRzLlN0cmluZ0FyZ3NFbnRyeRIMCgR0YWdzGAMgAygJGjEKD0RvdWJs",
            "ZUFyZ3NFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAE6AjgBGjEK",
            "D1N0cmluZ0FyZ3NFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6",
            "AjgBIs0BCgpBc3NpZ25tZW50EhIKCmNvbm5lY3Rpb24YASABKAkSIQoFZXJy",
            "b3IYAyABKAsyEi5nb29nbGUucnBjLlN0YXR1cxI5CgpleHRlbnNpb25zGAQg",
            "AygLMiUub3Blbm1hdGNoLkFzc2lnbm1lbnQuRXh0ZW5zaW9uc0VudHJ5GkcK",
            "D0V4dGVuc2lvbnNFbnRyeRILCgNrZXkYASABKAkSIwoFdmFsdWUYAiABKAsy",
            "FC5nb29nbGUucHJvdG9idWYuQW55OgI4AUoECAIQAyJBChFEb3VibGVSYW5n",
            "ZUZpbHRlchISCgpkb3VibGVfYXJnGAEgASgJEgsKA21heBgCIAEoARILCgNt",
            "aW4YAyABKAEiNwoSU3RyaW5nRXF1YWxzRmlsdGVyEhIKCnN0cmluZ19hcmcY",
            "ASABKAkSDQoFdmFsdWUYAiABKAkiHwoQVGFnUHJlc2VudEZpbHRlchILCgN0",
            "YWcYASABKAkizgEKBFBvb2wSDAoEbmFtZRgBIAEoCRI6ChRkb3VibGVfcmFu",
            "Z2VfZmlsdGVycxgCIAMoCzIcLm9wZW5tYXRjaC5Eb3VibGVSYW5nZUZpbHRl",
            "chI8ChVzdHJpbmdfZXF1YWxzX2ZpbHRlcnMYBCADKAsyHS5vcGVubWF0Y2gu",
            "U3RyaW5nRXF1YWxzRmlsdGVyEjgKE3RhZ19wcmVzZW50X2ZpbHRlcnMYBSAD",
            "KAsyGy5vcGVubWF0Y2guVGFnUHJlc2VudEZpbHRlckoECAMQBCIqCgZSb3N0",
            "ZXISDAoEbmFtZRgBIAEoCRISCgp0aWNrZXRfaWRzGAIgAygJIuwBCgxNYXRj",
            "aFByb2ZpbGUSDAoEbmFtZRgBIAEoCRIeCgVwb29scxgDIAMoCzIPLm9wZW5t",
            "YXRjaC5Qb29sEiIKB3Jvc3RlcnMYBCADKAsyES5vcGVubWF0Y2guUm9zdGVy",
            "EjsKCmV4dGVuc2lvbnMYBSADKAsyJy5vcGVubWF0Y2guTWF0Y2hQcm9maWxl",
            "LkV4dGVuc2lvbnNFbnRyeRpHCg9FeHRlbnNpb25zRW50cnkSCwoDa2V5GAEg",
            "ASgJEiMKBXZhbHVlGAIgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueToCOAFK",
            "BAgCEAMilQIKBU1hdGNoEhAKCG1hdGNoX2lkGAEgASgJEhUKDW1hdGNoX3By",
            "b2ZpbGUYAiABKAkSFgoObWF0Y2hfZnVuY3Rpb24YAyABKAkSIgoHdGlja2V0",
            "cxgEIAMoCzIRLm9wZW5tYXRjaC5UaWNrZXQSIgoHcm9zdGVycxgFIAMoCzIR",
            "Lm9wZW5tYXRjaC5Sb3N0ZXISNAoKZXh0ZW5zaW9ucxgHIAMoCzIgLm9wZW5t",
            "YXRjaC5NYXRjaC5FeHRlbnNpb25zRW50cnkaRwoPRXh0ZW5zaW9uc0VudHJ5",
            "EgsKA2tleRgBIAEoCRIjCgV2YWx1ZRgCIAEoCzIULmdvb2dsZS5wcm90b2J1",
            "Zi5Bbnk6AjgBSgQIBhAHQi5aIG9wZW4tbWF0Y2guZGV2L29wZW4tbWF0Y2gv",
            "cGtnL3BiqgIJT3Blbk1hdGNoYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Rpc.StatusReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.Ticket), global::OpenMatch.Ticket.Parser, new[]{ "Id", "Assignment", "SearchFields", "Extensions" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.SearchFields), global::OpenMatch.SearchFields.Parser, new[]{ "DoubleArgs", "StringArgs", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.Assignment), global::OpenMatch.Assignment.Parser, new[]{ "Connection", "Error", "Extensions" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.DoubleRangeFilter), global::OpenMatch.DoubleRangeFilter.Parser, new[]{ "DoubleArg", "Max", "Min" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.StringEqualsFilter), global::OpenMatch.StringEqualsFilter.Parser, new[]{ "StringArg", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.TagPresentFilter), global::OpenMatch.TagPresentFilter.Parser, new[]{ "Tag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.Pool), global::OpenMatch.Pool.Parser, new[]{ "Name", "DoubleRangeFilters", "StringEqualsFilters", "TagPresentFilters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.Roster), global::OpenMatch.Roster.Parser, new[]{ "Name", "TicketIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.MatchProfile), global::OpenMatch.MatchProfile.Parser, new[]{ "Name", "Pools", "Rosters", "Extensions" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.Match), global::OpenMatch.Match.Parser, new[]{ "MatchId", "MatchProfile", "MatchFunction", "Tickets", "Rosters", "Extensions" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A Ticket is a basic matchmaking entity in Open Match. A Ticket represents either an
  /// individual 'Player' or a 'Group' of players. Open Match will not interpret
  /// what the Ticket represents but just treat it as a matchmaking unit with a set
  /// of SearchFields. Open Match stores the Ticket in state storage and enables an
  /// Assignment to be associated with this Ticket.
  /// </summary>
  public sealed partial class Ticket : pb::IMessage<Ticket> {
    private static readonly pb::MessageParser<Ticket> _parser = new pb::MessageParser<Ticket>(() => new Ticket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ticket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket(Ticket other) : this() {
      id_ = other.id_;
      assignment_ = other.assignment_ != null ? other.assignment_.Clone() : null;
      searchFields_ = other.searchFields_ != null ? other.searchFields_.Clone() : null;
      extensions_ = other.extensions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket Clone() {
      return new Ticket(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Id represents an auto-generated Id issued by Open Match. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assignment" field.</summary>
    public const int AssignmentFieldNumber = 3;
    private global::OpenMatch.Assignment assignment_;
    /// <summary>
    /// An Assignment represents a game server assignment associated with a Ticket. 
    /// Open Match does not require or inspect any fields on Assignment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenMatch.Assignment Assignment {
      get { return assignment_; }
      set {
        assignment_ = value;
      }
    }

    /// <summary>Field number for the "search_fields" field.</summary>
    public const int SearchFieldsFieldNumber = 4;
    private global::OpenMatch.SearchFields searchFields_;
    /// <summary>
    /// Search fields are the fields which Open Match is aware of, and can be used
    /// when specifying filters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenMatch.SearchFields SearchFields {
      get { return searchFields_; }
      set {
        searchFields_ = value;
      }
    }

    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 5;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_extensions_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 42);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> extensions_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    /// <summary>
    /// Customized information not inspected by Open Match, to be used by the match
    /// making function, evaluator, and components making calls to Open Match.
    /// Optional, depending on the requirements of the connected systems.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Extensions {
      get { return extensions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ticket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ticket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Assignment, other.Assignment)) return false;
      if (!object.Equals(SearchFields, other.SearchFields)) return false;
      if (!Extensions.Equals(other.Extensions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (assignment_ != null) hash ^= Assignment.GetHashCode();
      if (searchFields_ != null) hash ^= SearchFields.GetHashCode();
      hash ^= Extensions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (assignment_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Assignment);
      }
      if (searchFields_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SearchFields);
      }
      extensions_.WriteTo(output, _map_extensions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (assignment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Assignment);
      }
      if (searchFields_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchFields);
      }
      size += extensions_.CalculateSize(_map_extensions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ticket other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.assignment_ != null) {
        if (assignment_ == null) {
          Assignment = new global::OpenMatch.Assignment();
        }
        Assignment.MergeFrom(other.Assignment);
      }
      if (other.searchFields_ != null) {
        if (searchFields_ == null) {
          SearchFields = new global::OpenMatch.SearchFields();
        }
        SearchFields.MergeFrom(other.SearchFields);
      }
      extensions_.Add(other.extensions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            if (assignment_ == null) {
              Assignment = new global::OpenMatch.Assignment();
            }
            input.ReadMessage(Assignment);
            break;
          }
          case 34: {
            if (searchFields_ == null) {
              SearchFields = new global::OpenMatch.SearchFields();
            }
            input.ReadMessage(SearchFields);
            break;
          }
          case 42: {
            extensions_.AddEntriesFrom(input, _map_extensions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Search fields are the fields which Open Match is aware of, and can be used
  /// when specifying filters.
  /// </summary>
  public sealed partial class SearchFields : pb::IMessage<SearchFields> {
    private static readonly pb::MessageParser<SearchFields> _parser = new pb::MessageParser<SearchFields>(() => new SearchFields());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchFields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchFields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchFields(SearchFields other) : this() {
      doubleArgs_ = other.doubleArgs_.Clone();
      stringArgs_ = other.stringArgs_.Clone();
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchFields Clone() {
      return new SearchFields(this);
    }

    /// <summary>Field number for the "double_args" field.</summary>
    public const int DoubleArgsFieldNumber = 1;
    private static readonly pbc::MapField<string, double>.Codec _map_doubleArgs_codec
        = new pbc::MapField<string, double>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForDouble(17), 10);
    private readonly pbc::MapField<string, double> doubleArgs_ = new pbc::MapField<string, double>();
    /// <summary>
    /// Float arguments.  Filterable on ranges.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, double> DoubleArgs {
      get { return doubleArgs_; }
    }

    /// <summary>Field number for the "string_args" field.</summary>
    public const int StringArgsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_stringArgs_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> stringArgs_ = new pbc::MapField<string, string>();
    /// <summary>
    /// String arguments.  Filterable on equality.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> StringArgs {
      get { return stringArgs_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Filterable on presence or absence of given value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchFields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!DoubleArgs.Equals(other.DoubleArgs)) return false;
      if (!StringArgs.Equals(other.StringArgs)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= DoubleArgs.GetHashCode();
      hash ^= StringArgs.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      doubleArgs_.WriteTo(output, _map_doubleArgs_codec);
      stringArgs_.WriteTo(output, _map_stringArgs_codec);
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += doubleArgs_.CalculateSize(_map_doubleArgs_codec);
      size += stringArgs_.CalculateSize(_map_stringArgs_codec);
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchFields other) {
      if (other == null) {
        return;
      }
      doubleArgs_.Add(other.doubleArgs_);
      stringArgs_.Add(other.stringArgs_);
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            doubleArgs_.AddEntriesFrom(input, _map_doubleArgs_codec);
            break;
          }
          case 18: {
            stringArgs_.AddEntriesFrom(input, _map_stringArgs_codec);
            break;
          }
          case 26: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An Assignment represents a game server assignment associated with a Ticket. Open
  /// match does not require or inspect any fields on assignment.
  /// </summary>
  public sealed partial class Assignment : pb::IMessage<Assignment> {
    private static readonly pb::MessageParser<Assignment> _parser = new pb::MessageParser<Assignment>(() => new Assignment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Assignment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Assignment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Assignment(Assignment other) : this() {
      connection_ = other.connection_;
      error_ = other.error_ != null ? other.error_.Clone() : null;
      extensions_ = other.extensions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Assignment Clone() {
      return new Assignment(this);
    }

    /// <summary>Field number for the "connection" field.</summary>
    public const int ConnectionFieldNumber = 1;
    private string connection_ = "";
    /// <summary>
    /// Connection information for this Assignment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Connection {
      get { return connection_; }
      set {
        connection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private global::Google.Rpc.Status error_;
    /// <summary>
    /// Error when finding an Assignment for this Ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Rpc.Status Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 4;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_extensions_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 34);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> extensions_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    /// <summary>
    /// Customized information not inspected by Open Match, to be used by the match
    /// making function, evaluator, and components making calls to Open Match.
    /// Optional, depending on the requirements of the connected systems.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Extensions {
      get { return extensions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Assignment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Assignment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Connection != other.Connection) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (!Extensions.Equals(other.Extensions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Connection.Length != 0) hash ^= Connection.GetHashCode();
      if (error_ != null) hash ^= Error.GetHashCode();
      hash ^= Extensions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Connection.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Connection);
      }
      if (error_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Error);
      }
      extensions_.WriteTo(output, _map_extensions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Connection.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Connection);
      }
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      size += extensions_.CalculateSize(_map_extensions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Assignment other) {
      if (other == null) {
        return;
      }
      if (other.Connection.Length != 0) {
        Connection = other.Connection;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          Error = new global::Google.Rpc.Status();
        }
        Error.MergeFrom(other.Error);
      }
      extensions_.Add(other.extensions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Connection = input.ReadString();
            break;
          }
          case 26: {
            if (error_ == null) {
              Error = new global::Google.Rpc.Status();
            }
            input.ReadMessage(Error);
            break;
          }
          case 34: {
            extensions_.AddEntriesFrom(input, _map_extensions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Filters numerical values to only those within a range.
  ///   double_arg: "foo"
  ///   max: 10
  ///   min: 5
  /// matches:
  ///   {"foo": 5}
  ///   {"foo": 7.5}
  ///   {"foo": 10}
  /// does not match:
  ///   {"foo": 4}
  ///   {"foo": 10.01}
  ///   {"foo": "7.5"}
  ///   {}
  /// </summary>
  public sealed partial class DoubleRangeFilter : pb::IMessage<DoubleRangeFilter> {
    private static readonly pb::MessageParser<DoubleRangeFilter> _parser = new pb::MessageParser<DoubleRangeFilter>(() => new DoubleRangeFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DoubleRangeFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleRangeFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleRangeFilter(DoubleRangeFilter other) : this() {
      doubleArg_ = other.doubleArg_;
      max_ = other.max_;
      min_ = other.min_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleRangeFilter Clone() {
      return new DoubleRangeFilter(this);
    }

    /// <summary>Field number for the "double_arg" field.</summary>
    public const int DoubleArgFieldNumber = 1;
    private string doubleArg_ = "";
    /// <summary>
    /// Name of the ticket's search_fields.double_args this Filter operates on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DoubleArg {
      get { return doubleArg_; }
      set {
        doubleArg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 2;
    private double max_;
    /// <summary>
    /// Maximum value. Defaults to positive infinity (any value above minv).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 3;
    private double min_;
    /// <summary>
    /// Minimum value. Defaults to 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DoubleRangeFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DoubleRangeFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DoubleArg != other.DoubleArg) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Max, other.Max)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Min, other.Min)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DoubleArg.Length != 0) hash ^= DoubleArg.GetHashCode();
      if (Max != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Max);
      if (Min != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Min);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DoubleArg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DoubleArg);
      }
      if (Max != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Max);
      }
      if (Min != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Min);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DoubleArg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DoubleArg);
      }
      if (Max != 0D) {
        size += 1 + 8;
      }
      if (Min != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DoubleRangeFilter other) {
      if (other == null) {
        return;
      }
      if (other.DoubleArg.Length != 0) {
        DoubleArg = other.DoubleArg;
      }
      if (other.Max != 0D) {
        Max = other.Max;
      }
      if (other.Min != 0D) {
        Min = other.Min;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DoubleArg = input.ReadString();
            break;
          }
          case 17: {
            Max = input.ReadDouble();
            break;
          }
          case 25: {
            Min = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Filters strings exactly equaling a value.
  ///   string_arg: "foo"
  ///   value: "bar"
  /// matches:
  ///   {"foo": "bar"}
  /// does not match:
  ///   {"foo": "baz"}
  ///   {"bar": "foo"}
  ///   {}
  /// </summary>
  public sealed partial class StringEqualsFilter : pb::IMessage<StringEqualsFilter> {
    private static readonly pb::MessageParser<StringEqualsFilter> _parser = new pb::MessageParser<StringEqualsFilter>(() => new StringEqualsFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringEqualsFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringEqualsFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringEqualsFilter(StringEqualsFilter other) : this() {
      stringArg_ = other.stringArg_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringEqualsFilter Clone() {
      return new StringEqualsFilter(this);
    }

    /// <summary>Field number for the "string_arg" field.</summary>
    public const int StringArgFieldNumber = 1;
    private string stringArg_ = "";
    /// <summary>
    /// Name of the ticket's search_fields.string_args this Filter operates on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringArg {
      get { return stringArg_; }
      set {
        stringArg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringEqualsFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringEqualsFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StringArg != other.StringArg) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StringArg.Length != 0) hash ^= StringArg.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StringArg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StringArg);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StringArg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringArg);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringEqualsFilter other) {
      if (other == null) {
        return;
      }
      if (other.StringArg.Length != 0) {
        StringArg = other.StringArg;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StringArg = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Filters to the tag being present on the search_fields.
  ///   tag: "foo"
  /// matches:
  ///   ["foo"]
  ///   ["bar","foo"]
  /// does not match:
  ///   ["bar"]
  ///   []
  /// </summary>
  public sealed partial class TagPresentFilter : pb::IMessage<TagPresentFilter> {
    private static readonly pb::MessageParser<TagPresentFilter> _parser = new pb::MessageParser<TagPresentFilter>(() => new TagPresentFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TagPresentFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagPresentFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagPresentFilter(TagPresentFilter other) : this() {
      tag_ = other.tag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagPresentFilter Clone() {
      return new TagPresentFilter(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private string tag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TagPresentFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TagPresentFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TagPresentFilter other) {
      if (other == null) {
        return;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Tag = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pool : pb::IMessage<Pool> {
    private static readonly pb::MessageParser<Pool> _parser = new pb::MessageParser<Pool>(() => new Pool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pool(Pool other) : this() {
      name_ = other.name_;
      doubleRangeFilters_ = other.doubleRangeFilters_.Clone();
      stringEqualsFilters_ = other.stringEqualsFilters_.Clone();
      tagPresentFilters_ = other.tagPresentFilters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pool Clone() {
      return new Pool(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// A developer-chosen human-readable name for this Pool.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "double_range_filters" field.</summary>
    public const int DoubleRangeFiltersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::OpenMatch.DoubleRangeFilter> _repeated_doubleRangeFilters_codec
        = pb::FieldCodec.ForMessage(18, global::OpenMatch.DoubleRangeFilter.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.DoubleRangeFilter> doubleRangeFilters_ = new pbc::RepeatedField<global::OpenMatch.DoubleRangeFilter>();
    /// <summary>
    /// Set of Filters indicating the filtering criteria. Selected players must
    /// match every Filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.DoubleRangeFilter> DoubleRangeFilters {
      get { return doubleRangeFilters_; }
    }

    /// <summary>Field number for the "string_equals_filters" field.</summary>
    public const int StringEqualsFiltersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::OpenMatch.StringEqualsFilter> _repeated_stringEqualsFilters_codec
        = pb::FieldCodec.ForMessage(34, global::OpenMatch.StringEqualsFilter.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.StringEqualsFilter> stringEqualsFilters_ = new pbc::RepeatedField<global::OpenMatch.StringEqualsFilter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.StringEqualsFilter> StringEqualsFilters {
      get { return stringEqualsFilters_; }
    }

    /// <summary>Field number for the "tag_present_filters" field.</summary>
    public const int TagPresentFiltersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::OpenMatch.TagPresentFilter> _repeated_tagPresentFilters_codec
        = pb::FieldCodec.ForMessage(42, global::OpenMatch.TagPresentFilter.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.TagPresentFilter> tagPresentFilters_ = new pbc::RepeatedField<global::OpenMatch.TagPresentFilter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.TagPresentFilter> TagPresentFilters {
      get { return tagPresentFilters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!doubleRangeFilters_.Equals(other.doubleRangeFilters_)) return false;
      if(!stringEqualsFilters_.Equals(other.stringEqualsFilters_)) return false;
      if(!tagPresentFilters_.Equals(other.tagPresentFilters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= doubleRangeFilters_.GetHashCode();
      hash ^= stringEqualsFilters_.GetHashCode();
      hash ^= tagPresentFilters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      doubleRangeFilters_.WriteTo(output, _repeated_doubleRangeFilters_codec);
      stringEqualsFilters_.WriteTo(output, _repeated_stringEqualsFilters_codec);
      tagPresentFilters_.WriteTo(output, _repeated_tagPresentFilters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += doubleRangeFilters_.CalculateSize(_repeated_doubleRangeFilters_codec);
      size += stringEqualsFilters_.CalculateSize(_repeated_stringEqualsFilters_codec);
      size += tagPresentFilters_.CalculateSize(_repeated_tagPresentFilters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pool other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      doubleRangeFilters_.Add(other.doubleRangeFilters_);
      stringEqualsFilters_.Add(other.stringEqualsFilters_);
      tagPresentFilters_.Add(other.tagPresentFilters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            doubleRangeFilters_.AddEntriesFrom(input, _repeated_doubleRangeFilters_codec);
            break;
          }
          case 34: {
            stringEqualsFilters_.AddEntriesFrom(input, _repeated_stringEqualsFilters_codec);
            break;
          }
          case 42: {
            tagPresentFilters_.AddEntriesFrom(input, _repeated_tagPresentFilters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Roster is a named collection of Ticket IDs. It exists so that a Tickets
  /// associated with a Match can be labelled to belong to a team, sub-team etc. It
  /// can also be used to represent the current state of a Match in scenarios such
  /// as backfill, join-in-progress etc.
  /// </summary>
  public sealed partial class Roster : pb::IMessage<Roster> {
    private static readonly pb::MessageParser<Roster> _parser = new pb::MessageParser<Roster>(() => new Roster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Roster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Roster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Roster(Roster other) : this() {
      name_ = other.name_;
      ticketIds_ = other.ticketIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Roster Clone() {
      return new Roster(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// A developer-chosen human-readable name for this Roster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticket_ids" field.</summary>
    public const int TicketIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_ticketIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> ticketIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Tickets belonging to this Roster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TicketIds {
      get { return ticketIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Roster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Roster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!ticketIds_.Equals(other.ticketIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= ticketIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      ticketIds_.WriteTo(output, _repeated_ticketIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += ticketIds_.CalculateSize(_repeated_ticketIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Roster other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      ticketIds_.Add(other.ticketIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ticketIds_.AddEntriesFrom(input, _repeated_ticketIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A MatchProfile is Open Match's representation of a Match specification. It is
  /// used to indicate the criteria for selecting players for a match. A
  /// MatchProfile is the input to the API to get matches and is passed to the
  /// MatchFunction. It contains all the information required by the MatchFunction
  /// to generate match proposals.
  /// </summary>
  public sealed partial class MatchProfile : pb::IMessage<MatchProfile> {
    private static readonly pb::MessageParser<MatchProfile> _parser = new pb::MessageParser<MatchProfile>(() => new MatchProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchProfile(MatchProfile other) : this() {
      name_ = other.name_;
      pools_ = other.pools_.Clone();
      rosters_ = other.rosters_.Clone();
      extensions_ = other.extensions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchProfile Clone() {
      return new MatchProfile(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of this match profile.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pools" field.</summary>
    public const int PoolsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::OpenMatch.Pool> _repeated_pools_codec
        = pb::FieldCodec.ForMessage(26, global::OpenMatch.Pool.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.Pool> pools_ = new pbc::RepeatedField<global::OpenMatch.Pool>();
    /// <summary>
    /// Set of pools to be queried when generating a match for this MatchProfile.
    /// The pool names can be used in empty Rosters to specify composition of a
    /// match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.Pool> Pools {
      get { return pools_; }
    }

    /// <summary>Field number for the "rosters" field.</summary>
    public const int RostersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::OpenMatch.Roster> _repeated_rosters_codec
        = pb::FieldCodec.ForMessage(34, global::OpenMatch.Roster.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.Roster> rosters_ = new pbc::RepeatedField<global::OpenMatch.Roster>();
    /// <summary>
    /// Set of Rosters for this match request. Could be empty Rosters used to
    /// indicate the composition of the generated Match or they could be partially
    /// pre-populated Ticket list to be used in scenarios such as backfill / join
    /// in progress.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.Roster> Rosters {
      get { return rosters_; }
    }

    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 5;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_extensions_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 42);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> extensions_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    /// <summary>
    /// Customized information not inspected by Open Match, to be used by the match
    /// making function, evaluator, and components making calls to Open Match.
    /// Optional, depending on the requirements of the connected systems.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Extensions {
      get { return extensions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!pools_.Equals(other.pools_)) return false;
      if(!rosters_.Equals(other.rosters_)) return false;
      if (!Extensions.Equals(other.Extensions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= pools_.GetHashCode();
      hash ^= rosters_.GetHashCode();
      hash ^= Extensions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      pools_.WriteTo(output, _repeated_pools_codec);
      rosters_.WriteTo(output, _repeated_rosters_codec);
      extensions_.WriteTo(output, _map_extensions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += pools_.CalculateSize(_repeated_pools_codec);
      size += rosters_.CalculateSize(_repeated_rosters_codec);
      size += extensions_.CalculateSize(_map_extensions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchProfile other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      pools_.Add(other.pools_);
      rosters_.Add(other.rosters_);
      extensions_.Add(other.extensions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            pools_.AddEntriesFrom(input, _repeated_pools_codec);
            break;
          }
          case 34: {
            rosters_.AddEntriesFrom(input, _repeated_rosters_codec);
            break;
          }
          case 42: {
            extensions_.AddEntriesFrom(input, _map_extensions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Match is used to represent a completed match object. It can be generated by
  /// a MatchFunction as a proposal or can be returned by OpenMatch as a result in
  /// response to the FetchMatches call.
  /// When a match is returned by the FetchMatches call, it should contain at least 
  /// one ticket to be considered as valid.
  /// </summary>
  public sealed partial class Match : pb::IMessage<Match> {
    private static readonly pb::MessageParser<Match> _parser = new pb::MessageParser<Match>(() => new Match());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Match> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match(Match other) : this() {
      matchId_ = other.matchId_;
      matchProfile_ = other.matchProfile_;
      matchFunction_ = other.matchFunction_;
      tickets_ = other.tickets_.Clone();
      rosters_ = other.rosters_.Clone();
      extensions_ = other.extensions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match Clone() {
      return new Match(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    /// <summary>
    /// A Match ID that should be passed through the stack for tracing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_profile" field.</summary>
    public const int MatchProfileFieldNumber = 2;
    private string matchProfile_ = "";
    /// <summary>
    /// Name of the match profile that generated this Match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchProfile {
      get { return matchProfile_; }
      set {
        matchProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_function" field.</summary>
    public const int MatchFunctionFieldNumber = 3;
    private string matchFunction_ = "";
    /// <summary>
    /// Name of the match function that generated this Match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchFunction {
      get { return matchFunction_; }
      set {
        matchFunction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tickets" field.</summary>
    public const int TicketsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::OpenMatch.Ticket> _repeated_tickets_codec
        = pb::FieldCodec.ForMessage(34, global::OpenMatch.Ticket.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.Ticket> tickets_ = new pbc::RepeatedField<global::OpenMatch.Ticket>();
    /// <summary>
    /// Tickets belonging to this match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.Ticket> Tickets {
      get { return tickets_; }
    }

    /// <summary>Field number for the "rosters" field.</summary>
    public const int RostersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::OpenMatch.Roster> _repeated_rosters_codec
        = pb::FieldCodec.ForMessage(42, global::OpenMatch.Roster.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.Roster> rosters_ = new pbc::RepeatedField<global::OpenMatch.Roster>();
    /// <summary>
    /// Set of Rosters that comprise this Match
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.Roster> Rosters {
      get { return rosters_; }
    }

    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 7;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_extensions_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 58);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> extensions_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    /// <summary>
    /// Customized information not inspected by Open Match, to be used by the match
    /// making function, evaluator, and components making calls to Open Match.
    /// Optional, depending on the requirements of the connected systems.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Extensions {
      get { return extensions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Match);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Match other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (MatchProfile != other.MatchProfile) return false;
      if (MatchFunction != other.MatchFunction) return false;
      if(!tickets_.Equals(other.tickets_)) return false;
      if(!rosters_.Equals(other.rosters_)) return false;
      if (!Extensions.Equals(other.Extensions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (MatchProfile.Length != 0) hash ^= MatchProfile.GetHashCode();
      if (MatchFunction.Length != 0) hash ^= MatchFunction.GetHashCode();
      hash ^= tickets_.GetHashCode();
      hash ^= rosters_.GetHashCode();
      hash ^= Extensions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (MatchProfile.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MatchProfile);
      }
      if (MatchFunction.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MatchFunction);
      }
      tickets_.WriteTo(output, _repeated_tickets_codec);
      rosters_.WriteTo(output, _repeated_rosters_codec);
      extensions_.WriteTo(output, _map_extensions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (MatchProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchProfile);
      }
      if (MatchFunction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchFunction);
      }
      size += tickets_.CalculateSize(_repeated_tickets_codec);
      size += rosters_.CalculateSize(_repeated_rosters_codec);
      size += extensions_.CalculateSize(_map_extensions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Match other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.MatchProfile.Length != 0) {
        MatchProfile = other.MatchProfile;
      }
      if (other.MatchFunction.Length != 0) {
        MatchFunction = other.MatchFunction;
      }
      tickets_.Add(other.tickets_);
      rosters_.Add(other.rosters_);
      extensions_.Add(other.extensions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            MatchProfile = input.ReadString();
            break;
          }
          case 26: {
            MatchFunction = input.ReadString();
            break;
          }
          case 34: {
            tickets_.AddEntriesFrom(input, _repeated_tickets_codec);
            break;
          }
          case 42: {
            rosters_.AddEntriesFrom(input, _repeated_rosters_codec);
            break;
          }
          case 58: {
            extensions_.AddEntriesFrom(input, _map_extensions_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
