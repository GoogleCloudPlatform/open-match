// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/frontend.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateTicketRequest struct {
	// A Ticket object with SearchFields defined.
	Ticket               *Ticket  `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTicketRequest) Reset()         { *m = CreateTicketRequest{} }
func (m *CreateTicketRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTicketRequest) ProtoMessage()    {}
func (*CreateTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_06c902cf58d2ae57, []int{0}
}

func (m *CreateTicketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTicketRequest.Unmarshal(m, b)
}
func (m *CreateTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTicketRequest.Marshal(b, m, deterministic)
}
func (m *CreateTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTicketRequest.Merge(m, src)
}
func (m *CreateTicketRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTicketRequest.Size(m)
}
func (m *CreateTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTicketRequest proto.InternalMessageInfo

func (m *CreateTicketRequest) GetTicket() *Ticket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

type DeleteTicketRequest struct {
	// A TicketId of a generated Ticket to be deleted.
	TicketId             string   `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTicketRequest) Reset()         { *m = DeleteTicketRequest{} }
func (m *DeleteTicketRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTicketRequest) ProtoMessage()    {}
func (*DeleteTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_06c902cf58d2ae57, []int{1}
}

func (m *DeleteTicketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteTicketRequest.Unmarshal(m, b)
}
func (m *DeleteTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteTicketRequest.Marshal(b, m, deterministic)
}
func (m *DeleteTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTicketRequest.Merge(m, src)
}
func (m *DeleteTicketRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteTicketRequest.Size(m)
}
func (m *DeleteTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTicketRequest proto.InternalMessageInfo

func (m *DeleteTicketRequest) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

type GetTicketRequest struct {
	// A TicketId of a generated Ticket.
	TicketId             string   `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTicketRequest) Reset()         { *m = GetTicketRequest{} }
func (m *GetTicketRequest) String() string { return proto.CompactTextString(m) }
func (*GetTicketRequest) ProtoMessage()    {}
func (*GetTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_06c902cf58d2ae57, []int{2}
}

func (m *GetTicketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTicketRequest.Unmarshal(m, b)
}
func (m *GetTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTicketRequest.Marshal(b, m, deterministic)
}
func (m *GetTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTicketRequest.Merge(m, src)
}
func (m *GetTicketRequest) XXX_Size() int {
	return xxx_messageInfo_GetTicketRequest.Size(m)
}
func (m *GetTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTicketRequest proto.InternalMessageInfo

func (m *GetTicketRequest) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

type WatchAssignmentsRequest struct {
	// A TicketId of a generated Ticket to get updates on.
	TicketId             string   `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchAssignmentsRequest) Reset()         { *m = WatchAssignmentsRequest{} }
func (m *WatchAssignmentsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchAssignmentsRequest) ProtoMessage()    {}
func (*WatchAssignmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_06c902cf58d2ae57, []int{3}
}

func (m *WatchAssignmentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchAssignmentsRequest.Unmarshal(m, b)
}
func (m *WatchAssignmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchAssignmentsRequest.Marshal(b, m, deterministic)
}
func (m *WatchAssignmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchAssignmentsRequest.Merge(m, src)
}
func (m *WatchAssignmentsRequest) XXX_Size() int {
	return xxx_messageInfo_WatchAssignmentsRequest.Size(m)
}
func (m *WatchAssignmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchAssignmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchAssignmentsRequest proto.InternalMessageInfo

func (m *WatchAssignmentsRequest) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

type WatchAssignmentsResponse struct {
	// An updated Assignment of the requested Ticket.
	Assignment           *Assignment `protobuf:"bytes,1,opt,name=assignment,proto3" json:"assignment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *WatchAssignmentsResponse) Reset()         { *m = WatchAssignmentsResponse{} }
func (m *WatchAssignmentsResponse) String() string { return proto.CompactTextString(m) }
func (*WatchAssignmentsResponse) ProtoMessage()    {}
func (*WatchAssignmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_06c902cf58d2ae57, []int{4}
}

func (m *WatchAssignmentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchAssignmentsResponse.Unmarshal(m, b)
}
func (m *WatchAssignmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchAssignmentsResponse.Marshal(b, m, deterministic)
}
func (m *WatchAssignmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchAssignmentsResponse.Merge(m, src)
}
func (m *WatchAssignmentsResponse) XXX_Size() int {
	return xxx_messageInfo_WatchAssignmentsResponse.Size(m)
}
func (m *WatchAssignmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchAssignmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchAssignmentsResponse proto.InternalMessageInfo

func (m *WatchAssignmentsResponse) GetAssignment() *Assignment {
	if m != nil {
		return m.Assignment
	}
	return nil
}

type AcknowledgeBackfillRequest struct {
	BackfillId           string      `protobuf:"bytes,1,opt,name=backfill_id,json=backfillId,proto3" json:"backfill_id,omitempty"`
	Assignment           *Assignment `protobuf:"bytes,2,opt,name=assignment,proto3" json:"assignment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AcknowledgeBackfillRequest) Reset()         { *m = AcknowledgeBackfillRequest{} }
func (m *AcknowledgeBackfillRequest) String() string { return proto.CompactTextString(m) }
func (*AcknowledgeBackfillRequest) ProtoMessage()    {}
func (*AcknowledgeBackfillRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_06c902cf58d2ae57, []int{5}
}

func (m *AcknowledgeBackfillRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcknowledgeBackfillRequest.Unmarshal(m, b)
}
func (m *AcknowledgeBackfillRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcknowledgeBackfillRequest.Marshal(b, m, deterministic)
}
func (m *AcknowledgeBackfillRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcknowledgeBackfillRequest.Merge(m, src)
}
func (m *AcknowledgeBackfillRequest) XXX_Size() int {
	return xxx_messageInfo_AcknowledgeBackfillRequest.Size(m)
}
func (m *AcknowledgeBackfillRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AcknowledgeBackfillRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AcknowledgeBackfillRequest proto.InternalMessageInfo

func (m *AcknowledgeBackfillRequest) GetBackfillId() string {
	if m != nil {
		return m.BackfillId
	}
	return ""
}

func (m *AcknowledgeBackfillRequest) GetAssignment() *Assignment {
	if m != nil {
		return m.Assignment
	}
	return nil
}

type CreateBackfillRequest struct {
	Backfill             *Backfill `protobuf:"bytes,1,opt,name=backfill,proto3" json:"backfill,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreateBackfillRequest) Reset()         { *m = CreateBackfillRequest{} }
func (m *CreateBackfillRequest) String() string { return proto.CompactTextString(m) }
func (*CreateBackfillRequest) ProtoMessage()    {}
func (*CreateBackfillRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_06c902cf58d2ae57, []int{6}
}

func (m *CreateBackfillRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateBackfillRequest.Unmarshal(m, b)
}
func (m *CreateBackfillRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateBackfillRequest.Marshal(b, m, deterministic)
}
func (m *CreateBackfillRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBackfillRequest.Merge(m, src)
}
func (m *CreateBackfillRequest) XXX_Size() int {
	return xxx_messageInfo_CreateBackfillRequest.Size(m)
}
func (m *CreateBackfillRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBackfillRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBackfillRequest proto.InternalMessageInfo

func (m *CreateBackfillRequest) GetBackfill() *Backfill {
	if m != nil {
		return m.Backfill
	}
	return nil
}

type DeleteBackfillRequest struct {
	BackfillId           string   `protobuf:"bytes,1,opt,name=backfill_id,json=backfillId,proto3" json:"backfill_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBackfillRequest) Reset()         { *m = DeleteBackfillRequest{} }
func (m *DeleteBackfillRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteBackfillRequest) ProtoMessage()    {}
func (*DeleteBackfillRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_06c902cf58d2ae57, []int{7}
}

func (m *DeleteBackfillRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteBackfillRequest.Unmarshal(m, b)
}
func (m *DeleteBackfillRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteBackfillRequest.Marshal(b, m, deterministic)
}
func (m *DeleteBackfillRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBackfillRequest.Merge(m, src)
}
func (m *DeleteBackfillRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteBackfillRequest.Size(m)
}
func (m *DeleteBackfillRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBackfillRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBackfillRequest proto.InternalMessageInfo

func (m *DeleteBackfillRequest) GetBackfillId() string {
	if m != nil {
		return m.BackfillId
	}
	return ""
}

type GetBackfillRequest struct {
	BackfillId           string   `protobuf:"bytes,1,opt,name=backfill_id,json=backfillId,proto3" json:"backfill_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBackfillRequest) Reset()         { *m = GetBackfillRequest{} }
func (m *GetBackfillRequest) String() string { return proto.CompactTextString(m) }
func (*GetBackfillRequest) ProtoMessage()    {}
func (*GetBackfillRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_06c902cf58d2ae57, []int{8}
}

func (m *GetBackfillRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBackfillRequest.Unmarshal(m, b)
}
func (m *GetBackfillRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBackfillRequest.Marshal(b, m, deterministic)
}
func (m *GetBackfillRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBackfillRequest.Merge(m, src)
}
func (m *GetBackfillRequest) XXX_Size() int {
	return xxx_messageInfo_GetBackfillRequest.Size(m)
}
func (m *GetBackfillRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBackfillRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBackfillRequest proto.InternalMessageInfo

func (m *GetBackfillRequest) GetBackfillId() string {
	if m != nil {
		return m.BackfillId
	}
	return ""
}

// UpdateBackfillRequest - update searchFields, extensions and set assignment
type UpdateBackfillRequest struct {
	// A Backfill object with SearchFields defined.
	BackfillTicket       *Backfill `protobuf:"bytes,1,opt,name=backfill_ticket,json=backfillTicket,proto3" json:"backfill_ticket,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdateBackfillRequest) Reset()         { *m = UpdateBackfillRequest{} }
func (m *UpdateBackfillRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBackfillRequest) ProtoMessage()    {}
func (*UpdateBackfillRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_06c902cf58d2ae57, []int{9}
}

func (m *UpdateBackfillRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateBackfillRequest.Unmarshal(m, b)
}
func (m *UpdateBackfillRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateBackfillRequest.Marshal(b, m, deterministic)
}
func (m *UpdateBackfillRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBackfillRequest.Merge(m, src)
}
func (m *UpdateBackfillRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateBackfillRequest.Size(m)
}
func (m *UpdateBackfillRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBackfillRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBackfillRequest proto.InternalMessageInfo

func (m *UpdateBackfillRequest) GetBackfillTicket() *Backfill {
	if m != nil {
		return m.BackfillTicket
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateTicketRequest)(nil), "openmatch.CreateTicketRequest")
	proto.RegisterType((*DeleteTicketRequest)(nil), "openmatch.DeleteTicketRequest")
	proto.RegisterType((*GetTicketRequest)(nil), "openmatch.GetTicketRequest")
	proto.RegisterType((*WatchAssignmentsRequest)(nil), "openmatch.WatchAssignmentsRequest")
	proto.RegisterType((*WatchAssignmentsResponse)(nil), "openmatch.WatchAssignmentsResponse")
	proto.RegisterType((*AcknowledgeBackfillRequest)(nil), "openmatch.AcknowledgeBackfillRequest")
	proto.RegisterType((*CreateBackfillRequest)(nil), "openmatch.CreateBackfillRequest")
	proto.RegisterType((*DeleteBackfillRequest)(nil), "openmatch.DeleteBackfillRequest")
	proto.RegisterType((*GetBackfillRequest)(nil), "openmatch.GetBackfillRequest")
	proto.RegisterType((*UpdateBackfillRequest)(nil), "openmatch.UpdateBackfillRequest")
}

func init() { proto.RegisterFile("api/frontend.proto", fileDescriptor_06c902cf58d2ae57) }

var fileDescriptor_06c902cf58d2ae57 = []byte{
	// 864 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xd6, 0x3a, 0x28, 0xc4, 0x2f, 0x55, 0x1a, 0x26, 0x4a, 0x89, 0x36, 0x14, 0x96, 0xa9, 0x80,
	0xd6, 0xe0, 0x9d, 0xd4, 0x49, 0x00, 0xa5, 0x45, 0x4a, 0xd2, 0x86, 0x12, 0xa9, 0x80, 0x70, 0x29,
	0x48, 0x5c, 0xd0, 0x7a, 0xf7, 0x65, 0xbd, 0x78, 0x3d, 0xb3, 0xd9, 0x99, 0xb5, 0x41, 0x55, 0x85,
	0xc4, 0x95, 0x1b, 0x88, 0x4b, 0xff, 0x04, 0x8e, 0xfc, 0x2b, 0x9c, 0xb8, 0xf3, 0x3f, 0x70, 0x45,
	0xfb, 0xd3, 0xbb, 0xf6, 0xc6, 0xb5, 0x4f, 0xd1, 0xce, 0xbc, 0xf7, 0x7d, 0xdf, 0x9b, 0xf9, 0xbe,
	0x89, 0x81, 0x58, 0x81, 0xc7, 0x2e, 0x42, 0xc1, 0x15, 0x72, 0xc7, 0x0c, 0x42, 0xa1, 0x04, 0x69,
	0x8a, 0x00, 0xf9, 0xd0, 0x52, 0x76, 0x5f, 0x4f, 0xb6, 0x87, 0x28, 0xa5, 0xe5, 0xa2, 0x4c, 0xb7,
	0xf5, 0x37, 0x5c, 0x21, 0x5c, 0x1f, 0x59, 0xbc, 0x65, 0x71, 0x2e, 0x94, 0xa5, 0x3c, 0xc1, 0xf3,
	0xdd, 0x0f, 0x92, 0x3f, 0x76, 0xdb, 0x45, 0xde, 0x96, 0x63, 0xcb, 0x75, 0x31, 0x64, 0x22, 0x48,
	0x2a, 0x6a, 0xaa, 0x77, 0x33, 0xac, 0xe4, 0xab, 0x17, 0x5d, 0x30, 0x1c, 0x06, 0xea, 0xa7, 0x74,
	0x93, 0x1e, 0xc3, 0xd6, 0x83, 0x10, 0x2d, 0x85, 0x5f, 0x7b, 0xf6, 0x00, 0x55, 0x17, 0x2f, 0x23,
	0x94, 0x8a, 0xdc, 0x81, 0x55, 0x95, 0x2c, 0xec, 0x68, 0x86, 0x76, 0x7b, 0xbd, 0xf3, 0x9a, 0x59,
	0xe8, 0x35, 0xb3, 0xca, 0xac, 0x80, 0x76, 0x60, 0xeb, 0x21, 0xfa, 0x38, 0x8d, 0xb0, 0x0b, 0xcd,
	0xb4, 0xe0, 0x7b, 0xcf, 0x49, 0x40, 0x9a, 0xdd, 0xb5, 0x74, 0xe1, 0xdc, 0xa1, 0x0c, 0x36, 0x1f,
	0xa1, 0x5a, 0xa2, 0xe1, 0x43, 0x78, 0xfd, 0xdb, 0x98, 0xfc, 0x44, 0x4a, 0xcf, 0xe5, 0x43, 0xe4,
	0x4a, 0x2e, 0xd4, 0xf7, 0x15, 0xec, 0xcc, 0xf6, 0xc9, 0x40, 0x70, 0x89, 0xe4, 0x10, 0xc0, 0x2a,
	0x96, 0xb3, 0x39, 0xb7, 0x4b, 0x73, 0x4e, 0x7a, 0xba, 0xa5, 0x42, 0xaa, 0x40, 0x3f, 0xb1, 0x07,
	0x5c, 0x8c, 0x7d, 0x74, 0x5c, 0x3c, 0xb5, 0xec, 0xc1, 0x85, 0xe7, 0xfb, 0xb9, 0x9a, 0xb7, 0x60,
	0xbd, 0x97, 0x2d, 0x4d, 0xf4, 0x40, 0xbe, 0x74, 0xee, 0x4c, 0xb1, 0x36, 0x16, 0x65, 0xfd, 0x0c,
	0xb6, 0xd3, 0x7b, 0x9a, 0x26, 0x64, 0xb0, 0x96, 0xa3, 0x67, 0x33, 0x6c, 0x95, 0xd0, 0x8a, 0xea,
	0xa2, 0x88, 0x7e, 0x0c, 0xdb, 0xe9, 0x7d, 0x2d, 0x2b, 0x9d, 0x1e, 0x02, 0x79, 0x84, 0x6a, 0xe9,
	0xb6, 0xa7, 0xb0, 0xfd, 0x34, 0x70, 0x6a, 0xa4, 0xdf, 0x87, 0xeb, 0x45, 0x67, 0xc5, 0x6d, 0xb5,
	0x13, 0x6c, 0xe4, 0xb5, 0xa9, 0x6d, 0x3a, 0xff, 0xad, 0xc1, 0xf5, 0x4f, 0xb3, 0x50, 0x3d, 0xc1,
	0x70, 0xe4, 0xd9, 0x48, 0x3c, 0xb8, 0x56, 0x76, 0x33, 0x79, 0xb3, 0x04, 0x54, 0x63, 0x73, 0x7d,
	0xd6, 0xd6, 0xf4, 0xdd, 0x5f, 0xfe, 0xfe, 0xf7, 0xf7, 0x86, 0x41, 0x77, 0xd9, 0xe8, 0x6e, 0x11,
	0x5a, 0x99, 0xe2, 0xb3, 0x54, 0xa5, 0x3c, 0xd2, 0x5a, 0x64, 0x0c, 0xd7, 0xca, 0xb6, 0xaf, 0x50,
	0xd5, 0xe4, 0x41, 0xbf, 0x61, 0xa6, 0x31, 0x34, 0xf3, 0x18, 0x9a, 0x67, 0x71, 0x0c, 0x29, 0x4b,
	0xf8, 0xee, 0xb4, 0xde, 0x9b, 0xc3, 0xc7, 0x9e, 0x15, 0x0e, 0x7f, 0x4e, 0x7c, 0x68, 0x16, 0xd9,
	0x21, 0xbb, 0x25, 0xd6, 0xe9, 0x44, 0xd5, 0x4d, 0x97, 0xb1, 0x91, 0x85, 0xd9, 0x5e, 0x68, 0xb0,
	0x39, 0x9d, 0x20, 0x42, 0x4b, 0xc0, 0x57, 0xc4, 0x52, 0xbf, 0x35, 0xb7, 0x26, 0x8d, 0x20, 0xbd,
	0x97, 0xc8, 0x39, 0x24, 0xfb, 0x0b, 0xca, 0x61, 0x93, 0x44, 0xc8, 0x3d, 0x8d, 0xfc, 0xa1, 0xc1,
	0x56, 0x4d, 0x16, 0xc9, 0x3b, 0xe5, 0x3c, 0x5d, 0x99, 0x55, 0xbd, 0xce, 0x66, 0xf4, 0x34, 0x91,
	0x74, 0x9f, 0x7e, 0x54, 0x27, 0x29, 0xb7, 0xa0, 0x64, 0xcf, 0x4a, 0x9e, 0x7f, 0xce, 0xac, 0x09,
	0x49, 0xec, 0x8d, 0x4b, 0xd8, 0xa8, 0x86, 0x95, 0x18, 0x33, 0x46, 0x5c, 0x48, 0xcc, 0xed, 0x44,
	0x0c, 0xa5, 0x37, 0xe7, 0x8a, 0x89, 0x29, 0x7f, 0x86, 0x8d, 0x6a, 0xaa, 0x2b, 0x94, 0xb5, 0x81,
	0xbf, 0xd2, 0x92, 0xfb, 0x09, 0x6b, 0xbb, 0xf5, 0xfe, 0x12, 0x47, 0x40, 0x46, 0xb0, 0x5e, 0x7a,
	0x1c, 0xc8, 0xcd, 0xaa, 0x31, 0x17, 0x9a, 0x36, 0xe3, 0x25, 0x4b, 0xf1, 0x5e, 0xc2, 0x46, 0xf5,
	0x75, 0xa9, 0x0c, 0x5e, 0xfb, 0xf0, 0xcc, 0x3d, 0xeb, 0xce, 0x4b, 0xcf, 0xfa, 0xf4, 0xd7, 0x95,
	0xdf, 0x4e, 0xfe, 0x69, 0x90, 0xbf, 0x34, 0x58, 0xcb, 0x1f, 0x20, 0x7a, 0x0e, 0xf0, 0x65, 0x80,
	0xdc, 0xf8, 0x3c, 0x06, 0x25, 0x37, 0xfa, 0x4a, 0x05, 0xf2, 0x88, 0xb1, 0x98, 0xa7, 0x9d, 0x12,
	0x39, 0x38, 0xd2, 0x6f, 0x4d, 0xbe, 0xdb, 0x8e, 0x27, 0xed, 0x48, 0xca, 0xe3, 0xf4, 0x0e, 0xdc,
	0x50, 0x44, 0x81, 0x34, 0x6d, 0x31, 0x6c, 0x7d, 0x03, 0xe4, 0x24, 0xb0, 0xec, 0x3e, 0x1a, 0x1d,
	0x73, 0xcf, 0x78, 0xec, 0xd9, 0x18, 0xff, 0xb7, 0x3a, 0xce, 0x21, 0x5d, 0x4f, 0xf5, 0xa3, 0x5e,
	0x5c, 0xc9, 0xd2, 0xd6, 0x0b, 0x11, 0xba, 0xd6, 0x10, 0x65, 0x89, 0x8c, 0xf5, 0x7c, 0xd1, 0x63,
	0x43, 0x4b, 0x2a, 0x0c, 0xd9, 0xe3, 0xf3, 0x07, 0x67, 0x5f, 0x3c, 0x39, 0xeb, 0xac, 0xdc, 0x35,
	0xf7, 0x5a, 0x0d, 0xad, 0xd1, 0xd9, 0xb4, 0x82, 0xc0, 0xf7, 0xec, 0xe4, 0x47, 0x02, 0xfb, 0x41,
	0x0a, 0x7e, 0x34, 0xb3, 0xd2, 0xbd, 0x07, 0x2b, 0x07, 0x7b, 0x07, 0xe4, 0x00, 0x5a, 0x5d, 0x54,
	0x51, 0xc8, 0xd1, 0x31, 0xc6, 0x7d, 0xe4, 0x86, 0xea, 0xa3, 0x11, 0xa2, 0x14, 0x51, 0x68, 0xa3,
	0xe1, 0x08, 0x94, 0x06, 0x17, 0xca, 0xc0, 0x1f, 0x3d, 0xa9, 0x4c, 0xb2, 0x0a, 0xaf, 0xbc, 0x68,
	0x68, 0xaf, 0x86, 0x9f, 0xc0, 0xce, 0xe4, 0x30, 0x8c, 0x87, 0xc2, 0x8e, 0xe2, 0xc4, 0x26, 0xe8,
	0xe4, 0xed, 0xfa, 0xa3, 0x61, 0xd2, 0x53, 0xc8, 0x1c, 0x61, 0x4b, 0xf6, 0x9d, 0x31, 0xb5, 0x55,
	0x9a, 0x2b, 0x18, 0xb8, 0x2c, 0xe8, 0xfd, 0xd9, 0x68, 0xc6, 0xf8, 0x09, 0x7c, 0x6f, 0x35, 0x71,
	0xef, 0xfe, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x11, 0xee, 0xfd, 0x66, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FrontendServiceClient is the client API for FrontendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrontendServiceClient interface {
	// CreateTicket assigns an unique TicketId to the input Ticket and record it in state storage.
	// A ticket is considered as ready for matchmaking once it is created.
	//   - If a TicketId exists in a Ticket request, an auto-generated TicketId will override this field.
	//   - If SearchFields exist in a Ticket, CreateTicket will also index these fields such that one can query the ticket with query.QueryTickets function.
	CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*Ticket, error)
	// DeleteTicket immediately stops Open Match from using the Ticket for matchmaking and removes the Ticket from state storage.
	// The client should delete the Ticket when finished matchmaking with it.
	DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetTicket get the Ticket associated with the specified TicketId.
	GetTicket(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*Ticket, error)
	// WatchAssignments stream back Assignment of the specified TicketId if it is updated.
	//   - If the Assignment is not updated, GetAssignment will retry using the configured backoff strategy.
	WatchAssignments(ctx context.Context, in *WatchAssignmentsRequest, opts ...grpc.CallOption) (FrontendService_WatchAssignmentsClient, error)
	// AcknowledgeBackfill is used to notify OpenMatch about GameServer connection info
	// This triggers an assignment process.
	AcknowledgeBackfill(ctx context.Context, in *AcknowledgeBackfillRequest, opts ...grpc.CallOption) (*Backfill, error)
	// If SearchFields exist in a Ticket, CreateBackfillRequest will also index these fields such that one can query the ticket with query.QueryBakfillTickets function.
	CreateBackfill(ctx context.Context, in *CreateBackfillRequest, opts ...grpc.CallOption) (*Backfill, error)
	// Side effects: Any tickets waiting for this backfill will be returned to the active pool, no longer pending.
	// TODO: delete or replace this comment.
	DeleteBackfill(ctx context.Context, in *DeleteBackfillRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetBackfill(ctx context.Context, in *GetBackfillRequest, opts ...grpc.CallOption) (*Backfill, error)
	// Side effects: Any tickets waiting for this backfill will be returned to the active pool, no longer pending.
	// TODO: delete or replace this comment.
	UpdateBackfill(ctx context.Context, in *UpdateBackfillRequest, opts ...grpc.CallOption) (*Backfill, error)
}

type frontendServiceClient struct {
	cc *grpc.ClientConn
}

func NewFrontendServiceClient(cc *grpc.ClientConn) FrontendServiceClient {
	return &frontendServiceClient{cc}
}

func (c *frontendServiceClient) CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, "/openmatch.FrontendService/CreateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/openmatch.FrontendService/DeleteTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) GetTicket(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, "/openmatch.FrontendService/GetTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) WatchAssignments(ctx context.Context, in *WatchAssignmentsRequest, opts ...grpc.CallOption) (FrontendService_WatchAssignmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FrontendService_serviceDesc.Streams[0], "/openmatch.FrontendService/WatchAssignments", opts...)
	if err != nil {
		return nil, err
	}
	x := &frontendServiceWatchAssignmentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FrontendService_WatchAssignmentsClient interface {
	Recv() (*WatchAssignmentsResponse, error)
	grpc.ClientStream
}

type frontendServiceWatchAssignmentsClient struct {
	grpc.ClientStream
}

func (x *frontendServiceWatchAssignmentsClient) Recv() (*WatchAssignmentsResponse, error) {
	m := new(WatchAssignmentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *frontendServiceClient) AcknowledgeBackfill(ctx context.Context, in *AcknowledgeBackfillRequest, opts ...grpc.CallOption) (*Backfill, error) {
	out := new(Backfill)
	err := c.cc.Invoke(ctx, "/openmatch.FrontendService/AcknowledgeBackfill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) CreateBackfill(ctx context.Context, in *CreateBackfillRequest, opts ...grpc.CallOption) (*Backfill, error) {
	out := new(Backfill)
	err := c.cc.Invoke(ctx, "/openmatch.FrontendService/CreateBackfill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) DeleteBackfill(ctx context.Context, in *DeleteBackfillRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/openmatch.FrontendService/DeleteBackfill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) GetBackfill(ctx context.Context, in *GetBackfillRequest, opts ...grpc.CallOption) (*Backfill, error) {
	out := new(Backfill)
	err := c.cc.Invoke(ctx, "/openmatch.FrontendService/GetBackfill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) UpdateBackfill(ctx context.Context, in *UpdateBackfillRequest, opts ...grpc.CallOption) (*Backfill, error) {
	out := new(Backfill)
	err := c.cc.Invoke(ctx, "/openmatch.FrontendService/UpdateBackfill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendServiceServer is the server API for FrontendService service.
type FrontendServiceServer interface {
	// CreateTicket assigns an unique TicketId to the input Ticket and record it in state storage.
	// A ticket is considered as ready for matchmaking once it is created.
	//   - If a TicketId exists in a Ticket request, an auto-generated TicketId will override this field.
	//   - If SearchFields exist in a Ticket, CreateTicket will also index these fields such that one can query the ticket with query.QueryTickets function.
	CreateTicket(context.Context, *CreateTicketRequest) (*Ticket, error)
	// DeleteTicket immediately stops Open Match from using the Ticket for matchmaking and removes the Ticket from state storage.
	// The client should delete the Ticket when finished matchmaking with it.
	DeleteTicket(context.Context, *DeleteTicketRequest) (*empty.Empty, error)
	// GetTicket get the Ticket associated with the specified TicketId.
	GetTicket(context.Context, *GetTicketRequest) (*Ticket, error)
	// WatchAssignments stream back Assignment of the specified TicketId if it is updated.
	//   - If the Assignment is not updated, GetAssignment will retry using the configured backoff strategy.
	WatchAssignments(*WatchAssignmentsRequest, FrontendService_WatchAssignmentsServer) error
	// AcknowledgeBackfill is used to notify OpenMatch about GameServer connection info
	// This triggers an assignment process.
	AcknowledgeBackfill(context.Context, *AcknowledgeBackfillRequest) (*Backfill, error)
	// If SearchFields exist in a Ticket, CreateBackfillRequest will also index these fields such that one can query the ticket with query.QueryBakfillTickets function.
	CreateBackfill(context.Context, *CreateBackfillRequest) (*Backfill, error)
	// Side effects: Any tickets waiting for this backfill will be returned to the active pool, no longer pending.
	// TODO: delete or replace this comment.
	DeleteBackfill(context.Context, *DeleteBackfillRequest) (*empty.Empty, error)
	GetBackfill(context.Context, *GetBackfillRequest) (*Backfill, error)
	// Side effects: Any tickets waiting for this backfill will be returned to the active pool, no longer pending.
	// TODO: delete or replace this comment.
	UpdateBackfill(context.Context, *UpdateBackfillRequest) (*Backfill, error)
}

// UnimplementedFrontendServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFrontendServiceServer struct {
}

func (*UnimplementedFrontendServiceServer) CreateTicket(ctx context.Context, req *CreateTicketRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (*UnimplementedFrontendServiceServer) DeleteTicket(ctx context.Context, req *DeleteTicketRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (*UnimplementedFrontendServiceServer) GetTicket(ctx context.Context, req *GetTicketRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicket not implemented")
}
func (*UnimplementedFrontendServiceServer) WatchAssignments(req *WatchAssignmentsRequest, srv FrontendService_WatchAssignmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchAssignments not implemented")
}
func (*UnimplementedFrontendServiceServer) AcknowledgeBackfill(ctx context.Context, req *AcknowledgeBackfillRequest) (*Backfill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgeBackfill not implemented")
}
func (*UnimplementedFrontendServiceServer) CreateBackfill(ctx context.Context, req *CreateBackfillRequest) (*Backfill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackfill not implemented")
}
func (*UnimplementedFrontendServiceServer) DeleteBackfill(ctx context.Context, req *DeleteBackfillRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackfill not implemented")
}
func (*UnimplementedFrontendServiceServer) GetBackfill(ctx context.Context, req *GetBackfillRequest) (*Backfill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackfill not implemented")
}
func (*UnimplementedFrontendServiceServer) UpdateBackfill(ctx context.Context, req *UpdateBackfillRequest) (*Backfill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackfill not implemented")
}

func RegisterFrontendServiceServer(s *grpc.Server, srv FrontendServiceServer) {
	s.RegisterService(&_FrontendService_serviceDesc, srv)
}

func _FrontendService_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmatch.FrontendService/CreateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).CreateTicket(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmatch.FrontendService/DeleteTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).DeleteTicket(ctx, req.(*DeleteTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_GetTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).GetTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmatch.FrontendService/GetTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).GetTicket(ctx, req.(*GetTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_WatchAssignments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchAssignmentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FrontendServiceServer).WatchAssignments(m, &frontendServiceWatchAssignmentsServer{stream})
}

type FrontendService_WatchAssignmentsServer interface {
	Send(*WatchAssignmentsResponse) error
	grpc.ServerStream
}

type frontendServiceWatchAssignmentsServer struct {
	grpc.ServerStream
}

func (x *frontendServiceWatchAssignmentsServer) Send(m *WatchAssignmentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FrontendService_AcknowledgeBackfill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgeBackfillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).AcknowledgeBackfill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmatch.FrontendService/AcknowledgeBackfill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).AcknowledgeBackfill(ctx, req.(*AcknowledgeBackfillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_CreateBackfill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackfillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).CreateBackfill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmatch.FrontendService/CreateBackfill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).CreateBackfill(ctx, req.(*CreateBackfillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_DeleteBackfill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackfillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).DeleteBackfill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmatch.FrontendService/DeleteBackfill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).DeleteBackfill(ctx, req.(*DeleteBackfillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_GetBackfill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackfillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).GetBackfill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmatch.FrontendService/GetBackfill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).GetBackfill(ctx, req.(*GetBackfillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_UpdateBackfill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackfillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).UpdateBackfill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmatch.FrontendService/UpdateBackfill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).UpdateBackfill(ctx, req.(*UpdateBackfillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrontendService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openmatch.FrontendService",
	HandlerType: (*FrontendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicket",
			Handler:    _FrontendService_CreateTicket_Handler,
		},
		{
			MethodName: "DeleteTicket",
			Handler:    _FrontendService_DeleteTicket_Handler,
		},
		{
			MethodName: "GetTicket",
			Handler:    _FrontendService_GetTicket_Handler,
		},
		{
			MethodName: "AcknowledgeBackfill",
			Handler:    _FrontendService_AcknowledgeBackfill_Handler,
		},
		{
			MethodName: "CreateBackfill",
			Handler:    _FrontendService_CreateBackfill_Handler,
		},
		{
			MethodName: "DeleteBackfill",
			Handler:    _FrontendService_DeleteBackfill_Handler,
		},
		{
			MethodName: "GetBackfill",
			Handler:    _FrontendService_GetBackfill_Handler,
		},
		{
			MethodName: "UpdateBackfill",
			Handler:    _FrontendService_UpdateBackfill_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchAssignments",
			Handler:       _FrontendService_WatchAssignments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/frontend.proto",
}
