{
  "swagger": "2.0",
  "info": {
    "title": "api/backend.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/backend/matches/createProposal": {
      "post": {
        "summary": "GetMatches triggers execution of the specfied MatchFunction for each of the\nspecified MatchProfiles. Each MatchFunction execution returns a set of\nproposals which are then evaluated to generate results. GetMatches method\nstreams these results back to the caller.\nTODO: Should this be renamed to createProposal? It's not a \"Get\" if it's\nexecuting a MatchFunction.",
        "operationId": "GetMatches",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/apiGetMatchesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiGetMatchesRequest"
            }
          }
        ],
        "tags": [
          "Backend"
        ]
      }
    },
    "/v1/backend/tickets/assign": {
      "post": {
        "summary": "AssignTickets sets the specified Assignment on the Tickets for the Ticket\nids passed.",
        "operationId": "AssignTickets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAssignTicketsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAssignTicketsRequest"
            }
          }
        ],
        "tags": [
          "Backend"
        ]
      }
    }
  },
  "definitions": {
    "MatchFunctionConfigGrpcFunctionProperties": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MatchFunctionConfigRestFunctionProperties": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "apiAssignTicketsRequest": {
      "type": "object",
      "properties": {
        "ticket_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of Ticket ids for which the Assinment is to be made."
        },
        "assignment": {
          "$ref": "#/definitions/apiAssignment",
          "description": "Assignment to be associated with the Ticket ids."
        }
      }
    },
    "apiAssignTicketsResponse": {
      "type": "object"
    },
    "apiAssignment": {
      "type": "object",
      "properties": {
        "connection": {
          "type": "string",
          "description": "Connection information for this Assignment."
        },
        "properties": {
          "type": "string",
          "description": "Other details to be sent to the players. (Optional)\nOpen Match does not interpret these properties."
        },
        "error": {
          "type": "string",
          "description": "Error when finding an Assignment for this Ticket."
        }
      },
      "description": "An Assignment object represents the assignment associated with a Ticket."
    },
    "apiFilter": {
      "type": "object",
      "properties": {
        "attribute": {
          "type": "string",
          "description": "Name of the ticket attribute this Filter operates on."
        },
        "max": {
          "type": "number",
          "format": "double",
          "description": "Maximum value. Defaults to positive infinity (any value above minv)."
        },
        "min": {
          "type": "number",
          "format": "double",
          "description": "Minimum value. Defaults to 0."
        }
      },
      "description": "A hard filter used to query a subset of Tickets meeting the filtering\ncriteria."
    },
    "apiGetMatchesRequest": {
      "type": "object",
      "properties": {
        "function": {
          "$ref": "#/definitions/apiMatchFunctionConfig",
          "title": "MatchFunction to be executed for the given list of MatchProfiles"
        },
        "profile": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiMatchProfile"
          },
          "description": "MatchProfiles for which this MatchFunction should be executed."
        }
      }
    },
    "apiGetMatchesResponse": {
      "type": "object",
      "properties": {
        "match": {
          "$ref": "#/definitions/apiMatch",
          "description": "Result Match for the requested MatchProfile."
        }
      }
    },
    "apiMatch": {
      "type": "object",
      "properties": {
        "match_id": {
          "type": "string",
          "description": "A Match ID that should be passed through the stack for tracing."
        },
        "match_profile": {
          "type": "string",
          "description": "Name of the match profile that generated this Match."
        },
        "match_function": {
          "type": "string",
          "description": "Name of the match function that generated this Match."
        },
        "ticket": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTicket"
          },
          "description": "Tickets belonging to this match."
        },
        "roster": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRoster"
          },
          "title": "Set of Rosters that comprise this Match"
        },
        "properties": {
          "type": "string",
          "description": "Match properties for this Match. Open Match does not interpret this field."
        }
      },
      "description": "A Match is used to represent a completed match object. It can be generated by\na MatchFunction as a proposal or can be returned by OpenMatch as a result in\nresponse to the GetMatches call."
    },
    "apiMatchFunctionConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A developer-chosen human-readable name for this Match Function."
        },
        "grpc_function": {
          "$ref": "#/definitions/MatchFunctionConfigGrpcFunctionProperties"
        },
        "rest_function": {
          "$ref": "#/definitions/MatchFunctionConfigRestFunctionProperties"
        }
      },
      "description": "Configuration for the Match Function to be triggered by Open Match to\ngenerate proposals."
    },
    "apiMatchProfile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of this match profile."
        },
        "properties": {
          "type": "string",
          "description": "Set of properties associated with this MatchProfile. (Optional)\nOpen Match does not interpret these properties but passes them through to\nthe MatchFunction."
        },
        "pool": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPool"
          },
          "description": "Set of pools to be queried when generating a match for this MatchProfile.\nThe pool names can be used in empty Rosters to specify composition of a\nmatch."
        },
        "roster": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRoster"
          },
          "description": "Set of Rosters for this match request. Could be empty Rosters used to\nindicate the composition of the generated Match or they could be partially\npre-populated Ticket list to be used in scenarios such as backfill / join\nin progress."
        }
      },
      "description": "A MatchProfile is Open Match's representation of a Match specification. It is\nused to indicate the criteria for selecting players for a match. A\nMatchProfile is the input to the API to get matches and is passed to the\nMatchFunction. It contains all the information required by the MatchFunction\nto generate match proposals."
    },
    "apiPool": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A developer-chosen human-readable name for this Pool."
        },
        "filter": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiFilter"
          },
          "description": "Set of Filters indicating the filtering criteria. Selected players must\nmatch every Filter."
        }
      }
    },
    "apiRoster": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A developer-chosen human-readable name for this Roster."
        },
        "ticket_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tickets belonging to this Roster."
        }
      },
      "description": "A Roster is a named collection of Ticket ids. It exists so that a Tickets\nassociated with a Match can be labelled to belong to a team, sub-team etc. It\ncan also be used to represent the current state of a Match in scenarios such\nas backfill, join-in-progress etc."
    },
    "apiTicket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Ticket id generated by Open Match."
        },
        "properties": {
          "type": "string",
          "description": "JSON string for properties associated with this Ticket. A subset of these\nproperties will be indexed based on the indexing configuration."
        },
        "assignment": {
          "$ref": "#/definitions/apiAssignment",
          "description": "Assignment associated with the Ticket."
        }
      },
      "description": "A Ticket is a basic matchmaking entity in Open Match. In order to enter\nmatchmaking using Open Match, the client should generate a Ticket, passing in\nthe properties to be associated with this Ticket. Open Match will generate an\nid for a Ticket during creation. A Ticket could be used to represent an\nindividual 'Player' or a 'Group' of players. Open Match will not interpret\nwhat the Ticket represents but just treat it as a matchmaking unit with a set\nof properties. Open Match stores the Ticket in state storage and enables an\nAssignment to be associated with this Ticket."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "x-stream-definitions": {
    "apiGetMatchesResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/apiGetMatchesResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of apiGetMatchesResponse"
    }
  }
}
