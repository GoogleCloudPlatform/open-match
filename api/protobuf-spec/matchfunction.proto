syntax = 'proto3';
package api;
option go_package = "internal/pb";

// The protobuf messages sent in the gRPC calls are defined 'messages.proto'.
import 'api/protobuf-spec/messages.proto';
import 'google/api/annotations.proto';

// Request message sent to the MMF.
message RunRequest {
  string profile_id = 1;                 // Developer-chosen profile name, state storage key for the match object.
  string proposal_id = 2;                // The ID against which, the generated proposal should be stored.
  string result_id = 3;                  // Final result ID. MMF needs to know this in case of errors where proposal generation can be shortcircuited.
  messages.MatchObject match_object = 4; // The match object containing the details of the match to be generated.
  string timestamp = 5;
}

message RunResponse {
}

// The MMF proto defines the API for running MMFs as long-lived, 'serving'
// functions inside of the kubernetes cluster.
service MatchFunction {
  // The assumption is that there will be one service for each MMF that is
  // being served.  Build your MMF in the appropriate serving harness, deploy it
  // to the K8s cluster with a unique service name, then connect to that service
  // and call 'Run()' to execute the fuction.
  rpc Run(RunRequest) returns (RunResponse) {
    option (google.api.http) = {
      put: "/v1/function"
      body: "*"
    };
  }
}
