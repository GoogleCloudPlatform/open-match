{
  "swagger": "2.0",
  "info": {
    "title": "api/mmlogic.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/mmlogic/pools": {
      "post": {
        "summary": "RetrievePool gets the list of Tickets that match every Filter in the\nspecified Pool.\nTODO: Consider renaming to \"GetPool\" to be consistent with HTTP REST CRUD\nconventions. Right now there's a GET and a POST for this verb.",
        "operationId": "RetrievePool",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/apiRetrievePoolResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiRetrievePoolRequest"
            }
          }
        ],
        "tags": [
          "MmLogic"
        ]
      }
    },
    "/v1/mmlogic/pools/{pool.name}": {
      "get": {
        "summary": "RetrievePool gets the list of Tickets that match every Filter in the\nspecified Pool.\nTODO: Consider renaming to \"GetPool\" to be consistent with HTTP REST CRUD\nconventions. Right now there's a GET and a POST for this verb.",
        "operationId": "RetrievePool2",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/apiRetrievePoolResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "pool.name",
            "description": "A developer-chosen human-readable name for this Pool.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MmLogic"
        ]
      }
    }
  },
  "definitions": {
    "apiAssignment": {
      "type": "object",
      "properties": {
        "connection": {
          "type": "string",
          "description": "Connection information for this Assignment."
        },
        "properties": {
          "type": "string",
          "description": "Other details to be sent to the players. (Optional)\nOpen Match does not interpret these properties."
        },
        "error": {
          "type": "string",
          "description": "Error when finding an Assignment for this Ticket."
        }
      },
      "description": "An Assignment object represents the assignment associated with a Ticket."
    },
    "apiFilter": {
      "type": "object",
      "properties": {
        "attribute": {
          "type": "string",
          "description": "Name of the ticket attribute this Filter operates on."
        },
        "max": {
          "type": "number",
          "format": "double",
          "description": "Maximum value. Defaults to positive infinity (any value above minv)."
        },
        "min": {
          "type": "number",
          "format": "double",
          "description": "Minimum value. Defaults to 0."
        }
      },
      "description": "A hard filter used to query a subset of Tickets meeting the filtering\ncriteria."
    },
    "apiPool": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A developer-chosen human-readable name for this Pool."
        },
        "filter": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiFilter"
          },
          "description": "Set of Filters indicating the filtering criteria. Selected players must\nmatch every Filter."
        }
      }
    },
    "apiRetrievePoolRequest": {
      "type": "object",
      "properties": {
        "pool": {
          "$ref": "#/definitions/apiPool",
          "description": "The Pool representing the set of Filters to be queried."
        }
      }
    },
    "apiRetrievePoolResponse": {
      "type": "object",
      "properties": {
        "ticket": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTicket"
          },
          "description": "The Tickets that meet the Filter criteria requested by the Pool."
        }
      }
    },
    "apiTicket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Ticket id generated by Open Match."
        },
        "properties": {
          "type": "string",
          "description": "JSON string for properties associated with this Ticket. A subset of these\nproperties will be indexed based on the indexing configuration."
        },
        "assignment": {
          "$ref": "#/definitions/apiAssignment",
          "description": "Assignment associated with the Ticket."
        }
      },
      "description": "A Ticket is a basic matchmaking entity in Open Match. In order to enter\nmatchmaking using Open Match, the client should generate a Ticket, passing in\nthe properties to be associated with this Ticket. Open Match will generate an\nid for a Ticket during creation. A Ticket could be used to represent an\nindividual 'Player' or a 'Group' of players. Open Match will not interpret\nwhat the Ticket represents but just treat it as a matchmaking unit with a set\nof properties. Open Match stores the Ticket in state storage and enables an\nAssignment to be associated with this Ticket."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "x-stream-definitions": {
    "apiRetrievePoolResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/apiRetrievePoolResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of apiRetrievePoolResponse"
    }
  }
}
