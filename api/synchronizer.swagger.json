{
  "swagger": "2.0",
  "info": {
    "title": "Synchronizer",
    "version": "1.0",
    "contact": {
      "name": "Open Match",
      "url": "https://open-match.dev",
      "email": "open-match-discuss@googlegroups.com"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "https://github.com/googleforgames/open-match/blob/master/LICENSE"
    }
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/synchronizer/proposals:evaluate": {
      "post": {
        "summary": "EvaluateProposals accepts a list of proposals and a registration identifier\nfor this request. If the synchronization cycle to which the request was\nregistered is completed, this request fails otherwise the proposals are\nadded to the list of proposals to be evaluated in the current cycle. At the\n end of the cycle, the user defined evaluation method is triggered and the\nmatches accepted by it are returned as results.",
        "operationId": "EvaluateProposals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEvaluateProposalsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiEvaluateProposalsRequest"
            }
          }
        ],
        "tags": [
          "Synchronizer"
        ]
      }
    },
    "/v1/synchronizer/register": {
      "get": {
        "summary": "Register associates this request with the current synchronization cycle and\nreturns an identifier for this registration. The caller returns this\nidentifier back in the evaluation request. This enables synchronizer to\nidentify stale evaluation requests belonging to a prior window.",
        "operationId": "Register",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiRegisterResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "tags": [
          "Synchronizer"
        ]
      }
    }
  },
  "definitions": {
    "apiAssignment": {
      "type": "object",
      "properties": {
        "connection": {
          "type": "string",
          "description": "Connection information for this Assignment."
        },
        "properties": {
          "type": "string",
          "description": "Other details to be sent to the players. (Optional)\nOpen Match does not interpret these properties."
        },
        "error": {
          "type": "string",
          "description": "Error when finding an Assignment for this Ticket."
        }
      },
      "description": "An Assignment object represents the assignment associated with a Ticket."
    },
    "apiEvaluateProposalsRequest": {
      "type": "object",
      "properties": {
        "match": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiMatch"
          },
          "description": "List of proposals to evaluate in the current synchronization cycle."
        },
        "id": {
          "type": "string",
          "description": "Identifier for this request issued during request registration."
        }
      }
    },
    "apiEvaluateProposalsResponse": {
      "type": "object",
      "properties": {
        "match": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiMatch"
          },
          "description": "Results from evaluating proposals for this request."
        }
      }
    },
    "apiMatch": {
      "type": "object",
      "properties": {
        "match_id": {
          "type": "string",
          "description": "A Match ID that should be passed through the stack for tracing."
        },
        "match_profile": {
          "type": "string",
          "description": "Name of the match profile that generated this Match."
        },
        "match_function": {
          "type": "string",
          "description": "Name of the match function that generated this Match."
        },
        "ticket": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTicket"
          },
          "description": "Tickets belonging to this match."
        },
        "roster": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRoster"
          },
          "title": "Set of Rosters that comprise this Match"
        },
        "properties": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Match properties for this Match. Open Match does not interpret this field."
        }
      },
      "description": "A Match is used to represent a completed match object. It can be generated by\na MatchFunction as a proposal or can be returned by OpenMatch as a result in\nresponse to the FetchMatches call.\nWhen a match is returned by the FetchMatches call, it should contain at least \none ticket to be considered as valid."
    },
    "apiRegisterResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier for this request valid for the current synchronization cycle."
        }
      }
    },
    "apiRoster": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A developer-chosen human-readable name for this Roster."
        },
        "ticket_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tickets belonging to this Roster."
        }
      },
      "description": "A Roster is a named collection of Ticket IDs. It exists so that a Tickets\nassociated with a Match can be labelled to belong to a team, sub-team etc. It\ncan also be used to represent the current state of a Match in scenarios such\nas backfill, join-in-progress etc."
    },
    "apiTicket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Ticket ID generated by Open Match."
        },
        "properties": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Properties contains custom info about the ticket.  Top level values can be\nused in indexing and filtering to find tickets."
        },
        "assignment": {
          "$ref": "#/definitions/apiAssignment",
          "description": "Assignment associated with the Ticket."
        }
      },
      "description": "A Ticket is a basic matchmaking entity in Open Match. In order to enter\nmatchmaking using Open Match, the client should generate a Ticket, passing in\nthe properties to be associated with this Ticket. Open Match will generate an\nID for a Ticket during creation. A Ticket could be used to represent an\nindividual 'Player' or a 'Group' of players. Open Match will not interpret\nwhat the Ticket represents but just treat it as a matchmaking unit with a set\nof properties. Open Match stores the Ticket in state storage and enables an\nAssignment to be associated with this Ticket."
    },
    "protobufListValue": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Repeated field of dynamically typed values."
        }
      },
      "description": "`ListValue` is a wrapper around a repeated field of values.\n\nThe JSON representation for `ListValue` is JSON array."
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "protobufStruct": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Unordered map of dynamically typed values."
        }
      },
      "description": "`Struct` represents a structured data value, consisting of fields\nwhich map to dynamically typed values. In some languages, `Struct`\nmight be supported by a native representation. For example, in\nscripting languages like JS a struct is represented as an\nobject. The details of that representation are described together\nwith the proto support for the language.\n\nThe JSON representation for `Struct` is JSON object."
    },
    "protobufValue": {
      "type": "object",
      "properties": {
        "null_value": {
          "$ref": "#/definitions/protobufNullValue",
          "description": "Represents a null value."
        },
        "number_value": {
          "type": "number",
          "format": "double",
          "description": "Represents a double value."
        },
        "string_value": {
          "type": "string",
          "description": "Represents a string value."
        },
        "bool_value": {
          "type": "boolean",
          "format": "boolean",
          "description": "Represents a boolean value."
        },
        "struct_value": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Represents a structured value."
        },
        "list_value": {
          "$ref": "#/definitions/protobufListValue",
          "description": "Represents a repeated `Value`."
        }
      },
      "description": "`Value` represents a dynamically typed value which can be either\nnull, a number, a string, a boolean, a recursive struct value, or a\nlist of values. A producer of value is expected to set one of that\nvariants, absence of any variant indicates an error.\n\nThe JSON representation for `Value` is JSON value."
    }
  },
  "externalDocs": {
    "description": "Open Match Documentation",
    "url": "https://open-match.dev/site/docs/"
  }
}
