// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package api;
option go_package = "internal/future/pb";

import "api/messages.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";


option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Frontend";
		version: "1.0";
		contact: {
			name: "Open Match";
			url: "https://open-match.dev";
			email: "open-match-discuss@googlegroups.com";
		}
		license: {
			name: "Apache 2.0 License";
			url: "https://github.com/GoogleCloudPlatform/open-match/blob/master/LICENSE";
		}
	}
	external_docs: {
		url: "https://open-match.dev/site/docs/";
		description: "Open Match Documentation";
	}
	schemes: HTTP;
	schemes: HTTPS;
	consumes: "application/json";
	produces: "application/json";
	responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
};

message CreateTicketRequest {
  // Ticket object with the properties of the Ticket to be created.
  Ticket ticket = 1;
}

message CreateTicketResponse {
  // Ticket object for the created Ticket - with the ticket id populated.
  Ticket ticket = 1;
}

message DeleteTicketRequest {
  // Ticket id of the Ticket to be deleted.
  string ticket_id = 1;
}

message DeleteTicketResponse {}

message GetTicketRequest {
  // Ticket id of the Ticket to fetch.
  string ticket_id = 1;
}

message GetTicketUpdatesRequest {
  // Ticket id of the Ticket to get updates on.
  string ticket_id = 1;
}

message GetTicketUpdatesResponse {
  // The updated Ticket object.
  Assignment assignment = 1;
}

// The Frontend service enables creating Tickets for matchmaking and fetching
// the status of these Tickets.
service Frontend {
  // CreateTicket will create a new ticket, assign a Ticket id to it and put the
  // Ticket in state storage. It will then look through the 'properties' field
  // for the attributes defined as indices the matchmakaking config. If the
  // attributes exist and are valid integers, they will be indexed. Creating a
  // ticket adds the Ticket to the pool of Tickets considered for matchmaking.
  rpc CreateTicket(CreateTicketRequest) returns (CreateTicketResponse) {
    option (google.api.http) = {
      post: "/v1/frontend/tickets"
      body: "*"
    };
  }

  // DeleteTicket removes the Ticket from state storage and from corresponding
  // configured indices. Deleting the ticket stops the ticket from being
  // considered for future matchmaking requests.
  rpc DeleteTicket(DeleteTicketRequest) returns (DeleteTicketResponse) {
    option (google.api.http) = {
      delete: "/v1/frontend/tickets/{ticket_id}"
    };
  }

  // GetTicket fetches the ticket associated with the specified Ticket id.
  rpc GetTicket(GetTicketRequest) returns (Ticket) {
    option (google.api.http) = {
      get: "/v1/frontend/tickets/{ticket_id}"
    };
  }

  // GetTicketUpdates streams matchmaking results from Open Match for the
  // provided Ticket id.
  rpc GetTicketUpdates(GetTicketUpdatesRequest)
      returns (stream GetTicketUpdatesResponse) {
    option (google.api.http) = {
      get: "/v1/frontend/tickets/{ticket_id}/updates"
    };
  }
}
