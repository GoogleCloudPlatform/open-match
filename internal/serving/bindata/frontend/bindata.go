// Code generated by go-bindata. DO NOT EDIT.
// sources:
// api/protobuf-spec/frontend.swagger.json (9.23kB)

package frontend

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _frontendSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\x1b\x39\x0e\x7f\xcf\xa7\xe0\xfa\x0e\x70\x02\xa4\x4e\xb7\x77\xb8\x87\xbc\xf5\xfa\xe7\x90\xc3\x75\x5b\x74\xdb\x87\xc3\x4e\xb1\x90\x47\x9c\xb1\x1a\x0d\x35\x15\x25\xbb\xbe\x45\xbe\xfb\x81\xd2\x8c\x3d\x9e\xb5\x9b\x34\x69\x16\xc1\xa2\x2f\xc5\xd4\x23\x72\x48\x8a\xfc\xf1\x27\x2a\xbf\x1d\x01\x4c\x78\xa5\xea\x1a\xfd\xe4\x1c\x26\x4f\x66\x8f\x27\xa7\xf2\x9b\xa1\xca\x4d\xce\x41\xde\x03\x4c\x82\x09\x16\xe5\xbd\x6a\xcd\x59\xeb\x5d\x70\xf3\x58\x3d\xe2\x16\xcb\xb3\xca\x3b\x0a\x48\x7a\x96\x7e\x4e\xc2\x00\x93\x25\x7a\x36\x8e\x44\xa4\x7b\x04\x72\x01\x18\xc3\xe4\x08\xe0\x2a\x7d\x82\xcb\x05\x36\xc8\x93\x73\xf8\x25\x0b\x2d\x42\x68\x7b\x05\xf2\xcc\xb2\xf6\x43\x5a\x5b\x3a\xe2\xb8\xb3\x58\xb5\xad\x35\xa5\x0a\xc6\xd1\xd9\x47\x76\xb4\x5d\xdb\x7a\xa7\x63\x79\xc3\xb5\x2a\x2c\x78\xeb\xe7\xd9\xf2\xc7\x8d\x43\x67\xad\x55\x6b\xf4\xdb\xb7\xb2\x3c\x86\xc1\x7f\xc5\x87\xd8\x34\xca\xaf\xc5\xcf\x67\x1e\x55\xc0\x37\x49\x08\x56\xc6\x5a\x68\x63\x80\xb0\x40\xc8\x8a\x00\x0c\x01\x07\x15\x10\x38\x38\xaf\x6a\x3c\x05\x45\x5a\x56\x10\x58\xe7\x2e\x0b\x0a\x0b\xef\x62\xbd\x48\x42\xd3\xd6\xbb\x16\x7d\x30\xc8\x53\xa8\x0c\x5a\x0d\x95\xf3\xe9\x95\x0a\xc1\x9b\x79\x0c\xc8\xb0\x76\x11\x16\x6a\x89\xa0\xb1\x32\x84\x1a\x14\x17\x64\x48\x9b\x32\xbf\xf4\xd0\xa8\x50\x2e\x1a\x75\x89\x1e\x4a\x47\x95\xa9\x67\x00\x17\xd5\x58\x0f\x7e\x36\x1c\x92\x39\xca\x23\x2c\x95\x35\x5a\xf4\x04\xac\xd1\xf3\xa9\xac\x5e\x67\x9f\xe6\x08\x86\x34\x7e\x46\x3d\x2b\xe8\xe2\xa7\x37\xef\xdf\x9d\x43\xe7\x73\x83\xcc\xaa\x46\x58\x99\x90\x5c\x60\xcc\x76\x33\xb4\xae\x8d\x56\x05\xd4\xe7\x05\xc1\x23\x10\xdd\xf0\x08\xb6\x0e\x16\xf4\xfa\xfd\xbb\xa4\xea\x2d\x72\xb4\x61\xa3\x4a\x23\xb9\x60\xa8\x06\x8e\x65\x89\xcc\xe0\x3c\x54\xca\xd8\xe8\x11\x8e\x93\xb5\x04\xe8\xbd\xf3\x60\xaa\x82\x08\x65\x8d\xf2\xeb\x93\x2e\x8b\xd2\x16\xc9\x47\xd2\xd6\x5f\xe8\xf1\x36\x0d\x97\x79\xe4\xd6\x11\x23\xef\x6c\x30\xc0\xe4\xc9\xe3\xc7\xa3\x9f\x00\x26\x1a\xb9\xf4\xa6\x0d\x5d\x8e\x3f\xed\x0d\xac\xa2\x85\x5e\xd3\x6c\xa0\x3e\x27\x8b\x24\xbc\xfa\x9d\x32\x80\xc9\x5f\x3d\x56\xa2\xe7\x2f\x67\x69\x1f\x8d\xe8\xe5\x33\xd5\x9a\xa1\xb5\x6f\x3b\xbd\x93\x1d\xe9\xab\xa3\x7d\xcf\x57\x03\xcf\x5a\xe5\x55\x83\x21\xa7\xf2\x2f\x83\xe5\x23\x9f\x48\x35\xa9\xc6\xe7\x4e\xaf\xc7\xa6\x1b\x3a\xf4\xc6\xe3\xa7\x68\x3c\x4a\x6c\x83\x8f\xf8\xad\x5d\xfe\x14\x91\xc3\x4d\x3c\xfe\x30\xf0\x38\xa8\x7a\xec\xeb\xe4\x65\x57\xd6\x5b\x5d\x1f\x8e\x86\x3a\xba\x88\xed\x85\x80\xb3\xdf\xf2\xc3\xcc\xe8\xab\x21\x1c\xd4\x78\x18\x0e\xfe\x85\xe1\x7d\xab\x95\x14\x17\x07\x8f\xaa\xe1\x4d\x29\x4a\x42\xfb\x94\xe8\x0c\x95\x77\x0d\xbc\x6e\x91\xe0\x95\xbc\xed\x6b\xbc\xa0\xd6\xbb\xa5\xd1\xa8\x7b\xf4\xb8\x78\x7e\x6d\xc1\xc1\xd4\xe8\x1e\x2b\x36\x25\x37\xdb\x16\x97\xea\x2c\x01\x57\xf5\x5a\xdd\xfc\x23\x96\x81\xb3\x0a\x47\x28\x05\xd6\x38\x8f\xb2\x44\x34\x56\xce\x5a\xb7\x32\x54\x17\x34\xae\xe5\x53\x30\x95\xd4\x5f\x4c\x5e\x42\x70\x10\x16\x2a\x74\x9f\x37\x0c\x8c\x48\xbf\x83\xbc\x0c\x00\x53\xc5\x6c\x6a\x6a\x90\xc2\xf4\x5c\x8c\x92\x88\x24\xe9\xc8\x51\x59\xbb\x16\xa8\x0a\xca\x10\x43\xad\x1a\x04\x46\xbf\xcc\xf8\x45\x58\x4a\xa2\x80\xb4\x27\xdf\xa4\xb2\x9e\x65\x95\xf2\x99\xc8\x03\x75\x0e\x4a\xd7\x34\x91\x04\xf8\x11\xca\xe8\x3d\x52\xd8\xd9\x83\x2c\x92\x2d\x47\x28\xad\x41\x0a\x9d\xb6\x04\x2a\x3b\xca\x5a\xc5\x0c\xca\x3a\xaa\x7b\xc4\xd9\x9a\x30\x52\x31\x84\x95\x11\x50\x3c\x8f\x49\x1f\x89\xa4\x85\x0d\x34\x25\x84\x05\xfc\xdc\x62\x19\xb2\x46\xc3\x39\x20\x69\x5b\x07\xe1\xca\xf1\x2d\xa8\x07\xe3\x1c\x7d\x0d\xf3\x35\x28\xf8\xa7\x2a\x2f\x91\xb4\x20\x6b\x42\xcb\x52\x59\x9b\x43\x8b\x30\xcd\x75\xf5\x74\xa3\x8a\xa7\x9b\xf5\x4f\xdf\x5c\x14\x84\xa4\x5b\x67\x28\xcc\x00\xa6\x3f\xe7\x60\xa6\x86\x30\x7d\x91\x62\x91\x1a\x43\xe5\x11\x53\x8a\x6a\x5c\xa2\x15\xf3\x53\xf8\x22\x23\x28\xce\x5d\x82\x65\x85\x11\x2d\x05\xbd\x58\x4a\x0a\x54\x5d\x97\xd2\xd0\x44\x1b\x4c\x6b\xfb\x8e\xc8\x80\x14\xd0\x83\x1a\x55\x46\xaa\x79\x51\xa8\xa0\xf6\x2e\xb6\xa7\xb9\x22\x06\xd6\xee\xf5\x46\xbc\xcd\x4d\x6a\xe5\x8d\x64\xe4\x02\x37\x65\x16\x5c\xce\xc3\x82\xba\x44\x04\x46\xc1\xc5\x80\x76\x0d\x91\x34\x7a\x40\x55\x2e\x3a\xc3\xa6\x2c\xe5\x06\xaf\x5f\x75\x5b\x92\xfb\x6c\x70\x20\x7d\x14\xe4\x33\x92\x96\x05\xe5\xfd\x66\x98\x6e\x8b\x7d\xba\xa9\x46\xe3\xc1\xad\x08\x2e\x9e\xe7\x1a\x17\x6b\x7a\x0c\x4a\x2e\x04\x07\x35\x06\x69\xfa\xb2\xb4\x33\x74\x56\x50\x41\x3f\xbd\x7e\xf7\xe2\x1c\xde\x2d\x4c\xde\x41\xa8\x91\x24\x4f\x50\x02\xc2\x8d\xfc\xa2\x1a\x17\x29\x48\x91\x5a\xa7\x34\x48\x06\x8e\xd5\xcb\xd6\x75\x2e\xf7\xc5\x07\xab\x85\xb1\x08\x2b\x09\x76\x9f\x16\x1d\x0e\x78\x2c\x9d\xcf\x0c\x23\x67\x14\xcf\xe0\xbf\x2e\xa6\x4d\xcf\x31\x40\x69\xda\x52\x54\xd6\x71\x8e\x6d\x07\x26\xc9\xbb\x44\x35\x72\x38\x40\x55\x21\x6b\x44\xb3\x94\xcf\xec\xd0\x90\x04\x25\x9b\x6d\x39\x76\xb2\xfb\x1e\x15\x3b\x52\x73\x8b\x10\x4c\x83\x2e\x86\x93\x53\x01\x22\x09\x7a\xda\x4f\x41\x03\x43\x51\x40\xa6\xa0\x4d\x38\x36\xbe\xbf\x7e\x05\x91\x82\xb1\x49\x40\xbb\x1f\xfa\x08\xfe\x3b\x72\x80\x39\x2a\xa9\x55\x68\x4c\xe2\x5a\x2a\x00\x2e\xd1\xaf\x7b\xd8\x4a\xfa\x59\x82\x86\xb5\x97\x9a\x09\x5e\x55\x95\x29\x93\x5b\x05\x0d\xa1\x59\x36\x4c\xd0\xa8\xdb\xf5\x1f\xe0\xa5\x8f\xb5\xb2\x26\xac\xa5\x5a\x25\x82\x4d\x83\xa4\x51\xcf\xbe\x40\x3f\xb6\x99\x72\xcf\xe4\xe3\x38\x6f\x4f\xd7\x6b\xb2\xf6\x93\xdb\x30\x92\xcf\x8f\xb2\xa6\x47\xa3\x3e\xbd\xf5\xe4\x8f\x22\x26\x9b\x26\xbc\x9f\x9d\x08\x97\xff\x3a\x76\x12\xd6\x6d\x52\x9c\x51\x7e\x68\xfe\xd5\xe9\x8d\xcd\xd9\xd2\xd8\xfd\x66\x7d\x8a\xe8\xbf\xc4\x9a\x2a\x65\xf9\x7e\x0c\x73\xce\x3e\x30\x93\xb6\x8d\xec\x81\x19\x96\xa9\xc0\x03\x33\x2a\xf1\x8c\x3f\xc4\xa6\x6f\xc1\xa2\x7b\xc9\x89\x46\x8b\x01\x0f\x12\xe3\xe7\xe9\xf5\x9b\xbe\xef\x34\x6e\x89\x3c\x6c\x45\xa9\x9f\xec\x90\x46\x21\x37\xda\x75\x1d\xab\xa0\x0d\x27\x15\x32\xf9\xe3\x09\x64\x85\x3b\xe2\xf9\xa4\x1b\x3d\x6a\xe8\x0e\xc3\x33\xc8\x0d\x15\xab\x4a\x28\xe4\x52\xfa\xfe\xe0\xe3\x05\x89\x99\x43\x15\x43\x4a\xb2\x92\x23\x7a\xe4\x8c\xa5\x1b\x98\x87\x57\xaf\x5e\x42\xab\x42\x40\x4f\xd2\xb8\x45\xc3\x0b\xe9\x2d\x21\x75\xd7\xdc\x06\x83\x7c\xd4\x30\x7c\x94\x5e\x54\x5a\x54\x14\xdb\xc4\x46\xe4\xd0\xce\x21\x31\x91\x9e\x91\xb4\xaa\x44\xd1\xf3\xe4\x04\xa6\xff\x51\xff\x33\x76\x3d\x85\x1c\xcc\x41\x7c\xa6\x3c\x0a\x4e\x6e\xdd\xbd\x7f\x86\xe1\xd2\x94\x97\xa9\x5b\x03\x80\xab\x2a\x69\x7e\x22\x3e\x57\xe5\xa5\xd0\xa9\x74\x6a\xd6\xd0\xa8\x35\x04\xa1\x33\xec\x9a\xdc\x77\x3b\xca\xdc\xca\x07\x6f\x62\x46\x83\x41\x69\x15\x54\x0e\xb1\x41\x86\x63\x6b\x2e\x31\x73\x59\x51\xc8\x41\x35\x6d\x0e\x5e\xb6\x26\x11\x44\xa1\x34\xa8\x61\x78\xcc\xdb\x0c\x42\xc0\x2a\x0e\x9d\x31\x8b\xde\x35\x58\x09\x15\x4c\x1d\x0e\xf5\x49\xef\x68\xd6\x68\x84\x93\xb3\xeb\x7c\xbe\x8b\xbb\x77\x3b\x5a\xdd\xff\xdc\x62\x58\x36\x0f\x7f\x6e\x31\xb4\xf6\x3b\x3d\xf8\x4e\x0f\x6e\x66\xd2\x77\x7a\xf0\xe7\xa5\x07\x47\xfd\xbf\x79\xf8\x3f\xc0\x8b\xed\xf8\x3d\xe3\xc5\xd3\x7e\x2c\x3d\x1c\xb5\xf5\xd6\xe5\x81\xd5\xc6\xb5\xc9\xa0\xbc\x76\x08\x47\x17\xab\x1d\x44\x3c\xe4\xe1\x10\x74\x96\xca\xc6\xeb\x04\x87\x81\x9b\xe4\x21\x90\xbc\x35\x14\xfe\xf1\xf7\x81\xd6\xbd\xe3\xc5\x03\x03\xce\x3b\x78\x9a\xb3\x61\x6c\xf2\x7e\x64\xee\xfa\x13\x77\x6d\xe4\x6b\x6d\xed\x70\xfc\xb0\xb1\x63\xf1\xbd\x6d\xe0\xe6\xe2\x7b\x8e\x98\x0f\x32\x50\xa3\xd5\x77\xb0\xd1\xe8\xdb\x24\xed\x01\x6d\x37\x95\x96\x46\x70\x0b\xb9\xed\xf5\xd1\x21\x69\xe5\xbd\xda\x85\xa1\x89\x09\xd8\x8c\xd7\x1f\xdc\x85\x31\x1e\x5c\x4b\x19\x06\x0d\xe4\x16\x0e\x75\x28\x7f\x0b\xc9\x0c\xc5\x37\x15\xdc\x73\x62\xda\x61\x65\xdb\x99\xd3\x94\xc1\x90\x9c\x2f\x94\xd0\xb3\xd6\x23\x23\x75\x03\x62\x61\x91\x2b\xe3\x11\xd2\xbd\x6b\xe9\x2c\x64\x24\x4a\x33\xbc\xa2\x83\x52\x2e\x26\x42\x6d\x09\x9c\xd7\x72\x18\x71\xdd\xc4\x75\x78\xb8\xc9\xe7\x9a\xf1\xfc\xf0\x74\x67\xa4\x57\x3a\x8d\xc0\x0b\x17\xad\xde\x8c\xdf\x0a\x52\x72\xce\x62\xc3\x41\x96\x1c\xb3\x6a\xfa\x79\x6b\xb2\x21\xcd\x53\x3b\xf9\x3c\x72\xeb\x79\xfd\x1a\xac\x8a\x54\x2e\x4e\x32\xbd\x56\x69\x48\xaa\x48\xa7\x4b\x8f\x2e\x91\xa1\x32\xe9\x98\x60\x08\x8e\xab\xfe\x52\x42\x63\x50\xc6\x32\xa8\xb9\x8b\x21\xdf\x52\x42\x02\x6c\xee\xef\x4d\x36\x77\x8e\xa7\x05\x31\xe6\x53\x84\x76\x65\x6c\xfa\xb8\x9d\xcc\x0a\xea\x62\xd3\x5f\x32\x80\x02\x8a\xcd\x1c\x3d\xb8\xaa\x97\x86\x79\x77\x77\x5b\xbf\x7d\xf3\x2c\x1d\x59\xfa\x79\x7c\x9a\x00\xf7\x3a\x40\xc9\x06\xb5\x31\x80\xa3\x74\xa0\x4c\x1d\x16\x14\x54\xb8\xea\xae\x50\x1a\x89\xfa\x1c\xb7\xfe\xcc\x00\x9e\x2d\xb0\xbc\xcc\xc7\xce\xa4\xbf\x8a\xd4\x5f\x6b\x40\xea\x07\xf2\x3c\xf6\x7a\xb6\x0b\x8f\xfd\x2d\xfc\x53\x5a\xdf\x05\x70\x64\xfd\xaf\xd1\xdf\x0a\x00\xee\xd0\x2b\xe7\xeb\x61\x39\xef\x47\x55\x1f\x49\x32\xe6\xe7\x34\x7d\x7c\x31\xaa\xb0\xaf\x76\xb4\xf6\x6d\xf9\xab\xe4\xf1\x21\x83\xbb\xdb\xee\x2f\x74\xf7\xbf\x3d\xd9\x1f\x87\x45\x08\xed\x3d\xa9\xee\x3a\xcb\x6d\x76\x27\x59\x75\x7b\x48\xeb\xb2\xee\xbe\xa0\x7d\x98\xbe\xfb\x61\xfd\x00\x71\xdc\x37\x8e\xde\x32\xc8\x6f\x4e\x1a\x32\xa0\xdd\x8c\x34\x5c\x33\x14\xbf\xb6\x61\xec\xd7\xba\xa7\x0c\xbe\xd0\x4a\x36\x7f\xa9\x93\xd7\xf7\x80\xec\x2a\xf8\x82\x75\x29\xba\x47\x57\x47\xff\x0f\x00\x00\xff\xff\x05\x5c\xe1\xce\x0e\x24\x00\x00")

func frontendSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_frontendSwaggerJson,
		"frontend.swagger.json",
	)
}

func frontendSwaggerJson() (*asset, error) {
	bytes, err := frontendSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "frontend.swagger.json", size: 9230, mode: os.FileMode(0644), modTime: time.Unix(1556139164, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0x39, 0x1d, 0x65, 0xaf, 0xef, 0x25, 0x80, 0x36, 0x4b, 0xf4, 0x58, 0x8a, 0x23, 0xce, 0xd7, 0xcc, 0x62, 0x2, 0x35, 0x58, 0x7e, 0x3f, 0xcc, 0x45, 0x90, 0x97, 0x9f, 0x22, 0x24, 0x28, 0xb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"frontend.swagger.json": frontendSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"frontend.swagger.json": &bintree{frontendSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
