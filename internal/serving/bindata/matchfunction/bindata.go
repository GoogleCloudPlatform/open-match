// Code generated by go-bindata. DO NOT EDIT.
// sources:
// api/protobuf-spec/matchfunction.swagger.json (6.426kB)

package matchfunction

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _matchfunctionSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x6f\x6f\xd3\xc8\x13\x7e\xdf\x4f\x31\xf2\xef\x27\x05\xa4\x5c\xca\xa1\xd3\xe9\xc4\xbb\x02\xaa\xae\x3a\x21\xaa\xc2\xbb\x33\x42\x1b\x7b\x12\x2f\x5d\xcf\x9a\x9d\xd9\x86\xe8\xd4\xef\x7e\x9a\xb5\xdd\x38\x26\x21\xfd\x03\x15\xc7\x2b\x63\xef\xcc\xce\x9f\x67\x9e\x7d\x36\xfd\xe7\x08\x20\xe3\x95\x59\x2e\x31\x64\x2f\x20\x7b\x3e\x7b\x96\x4d\xf5\x9d\xa5\x85\xcf\x5e\x80\x7e\x07\xc8\xc4\x8a\x43\xfd\x6e\x1a\x7b\xdc\x04\x2f\x7e\x1e\x17\xbf\x70\x83\xc5\x71\x6d\xa4\xa8\x16\x91\x0a\xb1\x9e\x66\xe9\x5b\xf2\x00\x90\x5d\x61\x60\xeb\x49\xed\xba\x47\x20\x2f\xc0\x28\xd9\x11\xc0\x75\xda\x87\x8b\x0a\x6b\xe4\xec\x05\xfc\xdd\x1a\x55\x22\x4d\xef\x40\x9f\x59\xd7\x7e\x48\x6b\x0b\x4f\x1c\xb7\x16\x9b\xa6\x71\xb6\x30\xba\xf5\xf1\x27\xf6\xb4\x59\xdb\x04\x5f\xc6\xe2\x96\x6b\x8d\x54\xbc\x49\xf6\xf8\xea\xd7\xe3\x3e\xa1\x9b\xb7\xba\x2c\xca\xe0\xbf\x1a\x7b\xac\x6b\x13\xd6\x9a\xdf\xfb\x0a\xc1\x30\xc7\xba\x51\x2b\xb0\x0c\x52\x19\x01\xa9\x30\x20\xac\xac\x73\x30\x47\xf0\x84\xc0\x18\xae\x6c\x81\xb0\xf0\x01\xd0\x14\x15\xbc\x79\x73\xda\xae\xb5\x9c\xd3\x1c\x2d\x2d\xd3\x1a\x2c\x67\x00\x2f\xa3\x75\x25\xac\x7d\x0c\x69\x99\x25\x75\x08\xa6\x69\x82\x6f\x82\x35\xd2\xb9\xa3\x25\x54\x26\x10\x32\x4f\xa1\xc4\xc6\xf9\x35\x58\xc9\x49\x7c\x5a\xfe\xd7\x1f\x0c\x85\x8b\x2c\x18\x60\x65\xa5\x02\x03\x91\xec\xe7\xb8\x89\x85\x4c\x8d\x53\x5d\x4b\x50\x78\x22\x2c\x04\x92\xad\x91\x7e\x49\x4e\x86\x4a\x28\x8c\x73\x30\xb9\x88\xf4\xe4\xe9\x44\x57\xe0\x17\x2c\xa2\x60\xda\x65\x11\x5b\x00\x74\xad\x4b\xf5\xf1\x0d\x86\x54\xef\xb3\x52\x6b\x74\x11\x69\xf8\x35\x20\x37\x9e\x18\x79\xab\xa8\x00\xd9\xf3\x67\xcf\x46\xaf\x00\xb2\x12\xb9\x08\xb6\xe9\x7a\x92\x9d\x00\xc7\xa2\x40\xe6\x45\x74\xd0\x7b\x1a\x6e\xde\x36\x48\xc1\x65\xbe\x72\x06\x90\xfd\x3f\xe0\x42\xfd\xfc\xef\xb8\xc4\x85\x25\xab\x7e\xf9\xd8\x34\xf6\x22\xd2\x45\xe7\x2e\xdb\x32\xba\x3e\xda\xf5\x7c\x3d\x48\xa8\x31\xc1\xd4\x28\x18\x36\xa0\x6b\xff\x8d\x52\xd1\x72\xeb\xde\x73\x5f\xae\xc7\x11\x5b\xda\xf7\x25\xe0\xe7\x68\x03\x6a\x25\x25\x44\xfc\x4e\x99\x7e\x8e\xc8\x72\x9b\x44\x3f\x0c\x12\x15\xb3\x1c\xa7\x98\xbd\x51\x1a\x38\xed\xa7\x66\x63\x76\x34\x74\x74\x7d\x33\xf6\x83\x58\x36\x83\x77\xee\xcc\x1a\xc3\x89\x48\xb0\xf3\x28\x38\x9c\x3d\x59\x37\xa9\x66\x7e\xfe\x09\x0b\xb9\xa9\x8d\x8e\x79\x83\x41\xec\x08\x45\x7d\x8d\xb7\x70\xd5\xfb\x60\x09\x96\x96\xd9\xce\x1e\x5e\x19\x17\x0f\x19\x0e\x4b\x9f\x2d\x7c\xa8\x8d\xf2\x42\x66\x49\x7e\xff\x6d\xe0\x75\x3b\xf3\x69\x4f\x42\xc3\xba\x3f\x20\xc1\x26\xf8\x85\x75\xf8\xd1\x96\xf7\x49\x53\xbd\x7a\x36\xee\x9e\xe6\x01\x39\x3a\xb9\xa7\x71\x3a\x30\x3e\x76\x79\x8e\xec\x77\x83\xb5\x46\x66\xb3\x44\x4e\x18\x7b\xdb\x1a\xee\x74\x2d\xb6\x46\x16\x53\x37\xb7\x8e\xeb\x68\xe4\x64\xcc\x33\x5d\xa7\xa0\x0b\x01\x18\xa9\x23\x47\x54\x4a\x9e\x65\x3b\xbb\xdb\xf1\xc7\xfe\xf6\x6e\x59\xf5\xe9\x9d\x5a\x27\xe9\x14\x7e\x74\xd4\x9b\x1d\x23\x77\x87\x7e\x7e\xb9\xfa\x3e\x13\x33\x74\x6a\xe9\xfb\x3b\x65\x31\xf2\xd5\x69\xf3\x6d\xc8\xbd\x4b\x26\xb7\xc7\xcb\x09\x4c\x2a\x13\xca\x09\x2c\x52\x33\x15\x2a\xaa\x3b\xd6\x3d\x66\x9a\x44\x71\xd0\x78\xef\x66\xbb\x51\x30\x04\xf9\x03\xa0\x70\x7f\x5e\xd8\xe1\xed\x96\xd6\x18\x82\x0f\xf7\xe2\x13\xcf\xdd\xb1\xb9\xd3\xd4\x84\x60\xb6\xcf\xc3\xcc\x0a\xd6\xe3\xf5\x07\x9b\x79\x91\xb6\xc9\x0e\x1f\xe4\xde\xbb\x1f\x1e\x4c\x7b\xd8\x9d\x7b\xef\x0e\x07\xa4\xc0\x8d\xb7\x6f\xc9\x21\x90\xbe\x6d\x90\x20\xe1\x6c\xc2\x60\x49\x30\x90\x51\x15\xd5\x04\x54\x7e\x4b\x92\x0d\x54\xf0\xad\x6c\x40\x48\x92\xbe\xf0\x0e\xda\x19\x4b\xca\x35\xcf\x06\x30\xe5\x3c\x9b\xe5\x74\x46\xe0\x43\xd9\x42\x3e\x74\xac\x69\x20\x91\x3d\x44\x56\x8d\xaa\xf8\x7f\x69\x8a\x4b\xa4\x12\x4e\xce\xcf\xa6\xad\xb0\x9d\x77\x6f\x0a\x5f\x22\x70\xe5\xa3\x2b\x61\x89\xa4\xca\x51\x65\x27\x10\xae\x60\xb0\x59\x27\x61\x09\xce\x5e\xa7\x10\x37\x88\xd5\x91\x73\x58\xaa\x4a\x7e\xa2\x31\xd6\x3e\x20\x94\x28\xc6\x3a\x06\x33\xf7\x51\xe0\xca\x38\x5b\xe6\x94\x0e\x79\x4e\x89\x48\x85\x8c\xb0\xb0\xe8\x4a\x9e\x02\x63\x2b\x66\x4b\x5f\xc4\xba\xaf\xc4\xd3\x19\xc0\xa6\x62\xad\x4c\x66\xa4\x92\xdb\x43\x40\x5f\xe6\xd4\x05\x27\x55\xf0\x71\x59\x69\x0d\x52\x72\x29\xfd\xda\x5c\x6a\xfa\xfd\x95\x62\x0a\xab\x74\x2b\x58\xfb\x08\xa6\x2c\x3b\x4a\x60\xb5\x99\x74\x83\x30\xd1\xd4\x72\x62\xd1\x14\x0c\xad\xa1\x95\x77\x0e\x99\xa1\x34\x62\x92\xed\xca\x72\xd5\x5f\x09\x26\x9b\x32\x4c\xda\x6c\x66\x00\xef\xfb\xf0\xda\xe0\x72\x4a\xb7\x92\x36\x7a\x99\x42\xe3\x9b\xe8\x8c\x60\x39\x05\xad\xcd\x4d\xe8\xdb\x5d\xba\x49\x65\xd8\xa7\x59\x4e\x39\x0d\x11\xa0\xf7\x06\x31\x96\xc0\x00\xc5\x7a\x8e\x01\xfc\xe2\xa6\xaa\xf3\x28\x50\x6b\x16\xcb\x8b\xf3\x57\xe9\x12\xd1\xdf\x8e\xcc\x25\x82\xd9\xf2\x04\x46\x11\xd9\x44\x01\x4f\x6e\x0d\x9d\xe8\x05\x03\x0b\x5c\xa9\x4f\xa9\xb0\xd6\x90\xe6\xb8\x69\xf7\x0c\xe0\x55\x85\xc5\xa5\x7e\xcc\x29\x6d\xd2\xd7\x5a\xeb\x93\xa0\xa8\xcf\x63\x50\xec\x21\xe0\x76\x30\xff\x6b\xdc\xab\x9c\xf5\xa0\xa3\xff\x87\x11\xde\x58\xd5\x1f\x64\x3b\xc3\x6c\x97\xa4\xf3\x77\x9f\x84\xee\xc8\x95\xf7\x3e\xbe\x1e\x83\x64\xdb\xd2\x7d\xcd\xaf\xa8\xee\xb6\xc8\x65\xc3\xb0\xa7\xc1\x93\x6c\x53\x6c\xe1\xac\xca\xd6\x7d\x0c\x5b\x78\x62\xcb\xa2\x4b\x9e\xb0\xa9\x11\x5a\x79\xbf\xf9\x89\xa2\xb3\xc7\x2b\x0c\x6b\x50\x8d\xad\x1b\xad\xc1\x99\x48\x45\xf5\x74\xc4\xc8\x39\xdd\x9d\x92\x61\x1f\x23\xe7\xb4\x87\x92\x73\xea\x6a\x73\x90\x79\xd4\x78\x1f\xf1\xb4\x3e\x7e\x1a\xce\x39\xdf\x9e\xe1\x47\x93\xff\xad\x56\xfd\xe1\x8a\xa7\xbb\xdf\x1c\x9c\xff\xf6\x10\xbc\x9b\x4e\x1f\x4b\xbb\x47\x96\xfd\x9b\xfe\x31\x98\xd4\xed\x85\x25\x2c\x61\xbe\x06\x03\x8c\xa2\x30\xda\xba\x18\xf0\x14\xda\x5f\xd4\x68\x0b\x56\x39\xa5\x61\xda\xdc\x14\x3a\xc0\xd6\x9d\xf4\xf0\x69\x34\x92\x83\x74\x06\x0f\xf7\x7d\xd0\x11\xbc\x71\xf4\x13\x4c\xc3\xc5\x18\x00\x8f\x36\x09\x5d\xd1\x1f\x47\xfb\xef\x99\x84\x43\x58\x7b\xad\x02\x90\x25\xc4\x42\x62\x40\x6d\x45\xe5\x5d\x09\x06\x9c\xe5\x04\xb4\x1e\x39\x09\x0b\x09\x39\x7b\xea\xfc\x6e\x34\x18\x77\x2e\x73\xe1\xe3\xc1\x43\xfa\xee\xd7\x74\x74\xa6\x61\xdc\xab\xa1\x5a\x74\xef\xf3\x5b\xfa\x38\x77\xf8\xad\xd1\xbd\xf9\x5b\xc6\x9f\xde\x95\x0c\xca\x0e\x96\xc5\x16\xdd\xbc\xa7\xdf\x28\x8f\xae\x8f\xfe\x0d\x00\x00\xff\xff\xc9\x98\xca\x80\x1a\x19\x00\x00")

func matchfunctionSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_matchfunctionSwaggerJson,
		"matchfunction.swagger.json",
	)
}

func matchfunctionSwaggerJson() (*asset, error) {
	bytes, err := matchfunctionSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "matchfunction.swagger.json", size: 6426, mode: os.FileMode(0644), modTime: time.Unix(1556139164, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0x16, 0x1c, 0x41, 0xee, 0xc0, 0x9d, 0x34, 0xf2, 0xce, 0x5f, 0xf6, 0xa9, 0xf0, 0xd, 0xa7, 0xeb, 0xba, 0xe0, 0x1f, 0x59, 0xdf, 0x48, 0xe9, 0x9a, 0xc0, 0x5e, 0x38, 0x8c, 0xf5, 0x1a, 0x18}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"matchfunction.swagger.json": matchfunctionSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"matchfunction.swagger.json": {matchfunctionSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
