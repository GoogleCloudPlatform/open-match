// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/protobuf-spec/function.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RunRequest struct {
	Arguments            *Arguments `protobuf:"bytes,1,opt,name=arguments,proto3" json:"arguments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RunRequest) Reset()         { *m = RunRequest{} }
func (m *RunRequest) String() string { return proto.CompactTextString(m) }
func (*RunRequest) ProtoMessage()    {}
func (*RunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_949a68f1f25eb768, []int{0}
}

func (m *RunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunRequest.Unmarshal(m, b)
}
func (m *RunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunRequest.Marshal(b, m, deterministic)
}
func (m *RunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunRequest.Merge(m, src)
}
func (m *RunRequest) XXX_Size() int {
	return xxx_messageInfo_RunRequest.Size(m)
}
func (m *RunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunRequest proto.InternalMessageInfo

func (m *RunRequest) GetArguments() *Arguments {
	if m != nil {
		return m.Arguments
	}
	return nil
}

type RunResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunResponse) Reset()         { *m = RunResponse{} }
func (m *RunResponse) String() string { return proto.CompactTextString(m) }
func (*RunResponse) ProtoMessage()    {}
func (*RunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_949a68f1f25eb768, []int{1}
}

func (m *RunResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunResponse.Unmarshal(m, b)
}
func (m *RunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunResponse.Marshal(b, m, deterministic)
}
func (m *RunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunResponse.Merge(m, src)
}
func (m *RunResponse) XXX_Size() int {
	return xxx_messageInfo_RunResponse.Size(m)
}
func (m *RunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RunRequest)(nil), "api.RunRequest")
	proto.RegisterType((*RunResponse)(nil), "api.RunResponse")
}

func init() { proto.RegisterFile("api/protobuf-spec/function.proto", fileDescriptor_949a68f1f25eb768) }

var fileDescriptor_949a68f1f25eb768 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0x41, 0x4b, 0xc4, 0x40,
	0x0c, 0x85, 0x5d, 0x16, 0x44, 0x67, 0x11, 0xa5, 0x5e, 0x64, 0x4f, 0x4b, 0x4f, 0x22, 0xec, 0x0c,
	0xae, 0xa8, 0x47, 0x51, 0x41, 0xaf, 0xd2, 0xa3, 0xb7, 0x69, 0x4d, 0xbb, 0x03, 0x9d, 0x24, 0x36,
	0xc9, 0xff, 0x17, 0x5a, 0xb5, 0x97, 0xbd, 0xbe, 0x7c, 0x5f, 0x92, 0xe7, 0x36, 0x91, 0x53, 0xe0,
	0x81, 0x94, 0x6a, 0x6b, 0xb7, 0xc2, 0xd0, 0x84, 0xd6, 0xb0, 0xd1, 0x44, 0xe8, 0xc7, 0xb8, 0x58,
	0x46, 0x4e, 0xeb, 0x03, 0x58, 0x06, 0x91, 0xd8, 0x81, 0x4c, 0x58, 0xf9, 0xe4, 0x5c, 0x65, 0x58,
	0xc1, 0xb7, 0x81, 0x68, 0x71, 0xeb, 0x4e, 0xe3, 0xd0, 0x59, 0x06, 0x54, 0xb9, 0x5a, 0x6c, 0x16,
	0xd7, 0xab, 0xdd, 0xa5, 0xff, 0x37, 0x9e, 0xff, 0x46, 0xd5, 0x4c, 0x95, 0x67, 0x6e, 0x35, 0x2e,
	0x10, 0x26, 0x14, 0xd8, 0x3d, 0xb8, 0x93, 0xb7, 0xdf, 0x47, 0x8a, 0x1b, 0xb7, 0xac, 0x0c, 0x8b,
	0x73, 0x1f, 0x39, 0xf9, 0xf9, 0xca, 0xfa, 0x62, 0x0e, 0x26, 0xab, 0x3c, 0x7a, 0x79, 0xfc, 0xbc,
	0xef, 0x92, 0xee, 0xad, 0xf6, 0x0d, 0xe5, 0xf0, 0x4e, 0xd4, 0xf5, 0xf0, 0xda, 0x93, 0x7d, 0x7d,
	0xf4, 0x51, 0x5b, 0x1a, 0x72, 0x20, 0x06, 0xdc, 0xe6, 0xa8, 0xcd, 0x3e, 0x24, 0x54, 0x18, 0x30,
	0xf6, 0x81, 0xeb, 0xfa, 0x78, 0xec, 0x71, 0xf7, 0x13, 0x00, 0x00, 0xff, 0xff, 0x71, 0x72, 0x85,
	0x28, 0x12, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FunctionClient is the client API for Function service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FunctionClient interface {
	// The assumption is that there will be one service for each MMF that is
	// being served.  Build your MMF in the appropriate serving harness, deploy it
	// to the K8s cluster with a unique service name, then connect to that service
	// and call 'Run()' to execute the fuction.
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
}

type functionClient struct {
	cc *grpc.ClientConn
}

func NewFunctionClient(cc *grpc.ClientConn) FunctionClient {
	return &functionClient{cc}
}

func (c *functionClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, "/api.Function/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FunctionServer is the server API for Function service.
type FunctionServer interface {
	// The assumption is that there will be one service for each MMF that is
	// being served.  Build your MMF in the appropriate serving harness, deploy it
	// to the K8s cluster with a unique service name, then connect to that service
	// and call 'Run()' to execute the fuction.
	Run(context.Context, *RunRequest) (*RunResponse, error)
}

// UnimplementedFunctionServer can be embedded to have forward compatible implementations.
type UnimplementedFunctionServer struct {
}

func (*UnimplementedFunctionServer) Run(ctx context.Context, req *RunRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}

func RegisterFunctionServer(s *grpc.Server, srv FunctionServer) {
	s.RegisterService(&_Function_serviceDesc, srv)
}

func _Function_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Function/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Function_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Function",
	HandlerType: (*FunctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Function_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protobuf-spec/function.proto",
}
