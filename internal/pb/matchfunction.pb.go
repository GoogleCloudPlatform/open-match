// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/protobuf-spec/matchfunction.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request message sent to the MMF.
type RunRequest struct {
	ProfileId            string       `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	ProposalId           string       `protobuf:"bytes,2,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	ResultId             string       `protobuf:"bytes,3,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
	MatchObject          *MatchObject `protobuf:"bytes,4,opt,name=match_object,json=matchObject,proto3" json:"match_object,omitempty"`
	Timestamp            string       `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RunRequest) Reset()         { *m = RunRequest{} }
func (m *RunRequest) String() string { return proto.CompactTextString(m) }
func (*RunRequest) ProtoMessage()    {}
func (*RunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2676c9fc3293827, []int{0}
}

func (m *RunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunRequest.Unmarshal(m, b)
}
func (m *RunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunRequest.Marshal(b, m, deterministic)
}
func (m *RunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunRequest.Merge(m, src)
}
func (m *RunRequest) XXX_Size() int {
	return xxx_messageInfo_RunRequest.Size(m)
}
func (m *RunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunRequest proto.InternalMessageInfo

func (m *RunRequest) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

func (m *RunRequest) GetProposalId() string {
	if m != nil {
		return m.ProposalId
	}
	return ""
}

func (m *RunRequest) GetResultId() string {
	if m != nil {
		return m.ResultId
	}
	return ""
}

func (m *RunRequest) GetMatchObject() *MatchObject {
	if m != nil {
		return m.MatchObject
	}
	return nil
}

func (m *RunRequest) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type RunResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunResponse) Reset()         { *m = RunResponse{} }
func (m *RunResponse) String() string { return proto.CompactTextString(m) }
func (*RunResponse) ProtoMessage()    {}
func (*RunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2676c9fc3293827, []int{1}
}

func (m *RunResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunResponse.Unmarshal(m, b)
}
func (m *RunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunResponse.Marshal(b, m, deterministic)
}
func (m *RunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunResponse.Merge(m, src)
}
func (m *RunResponse) XXX_Size() int {
	return xxx_messageInfo_RunResponse.Size(m)
}
func (m *RunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RunRequest)(nil), "api.RunRequest")
	proto.RegisterType((*RunResponse)(nil), "api.RunResponse")
}

func init() {
	proto.RegisterFile("api/protobuf-spec/matchfunction.proto", fileDescriptor_b2676c9fc3293827)
}

var fileDescriptor_b2676c9fc3293827 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0xf3, 0x40,
	0x10, 0x86, 0xbf, 0x7c, 0x55, 0x31, 0x13, 0x8b, 0xb2, 0x20, 0x94, 0xaa, 0x58, 0x0a, 0x42, 0x11,
	0x9a, 0x40, 0x45, 0x14, 0xbc, 0x29, 0x28, 0x3d, 0x88, 0x92, 0xa3, 0x97, 0xb2, 0x49, 0x26, 0xed,
	0xca, 0x66, 0x67, 0xcc, 0xee, 0xfe, 0x40, 0xff, 0x99, 0x74, 0x53, 0xdb, 0x8b, 0xc7, 0x7d, 0x9e,
	0xd9, 0xe1, 0x9d, 0x17, 0xae, 0x24, 0xab, 0x8c, 0x5b, 0x72, 0x54, 0xf8, 0x7a, 0x6a, 0x19, 0xcb,
	0xac, 0x91, 0xae, 0x5c, 0xd5, 0xde, 0x94, 0x4e, 0x91, 0x49, 0x83, 0x13, 0x3d, 0xc9, 0x6a, 0x38,
	0xfa, 0x63, 0x16, 0xad, 0x95, 0x4b, 0xb4, 0xdd, 0xd8, 0xf8, 0x3b, 0x02, 0xc8, 0xbd, 0xc9, 0xf1,
	0xcb, 0xa3, 0x75, 0xe2, 0x02, 0x80, 0x5b, 0xaa, 0x95, 0xc6, 0x85, 0xaa, 0x06, 0xd1, 0x28, 0x9a,
	0xc4, 0x79, 0xbc, 0x21, 0xf3, 0x4a, 0x5c, 0x42, 0xc2, 0x2d, 0x31, 0x59, 0xa9, 0xd7, 0xfe, 0x7f,
	0xf0, 0xf0, 0x8b, 0xe6, 0x95, 0x38, 0x83, 0xb8, 0x45, 0xeb, 0xb5, 0x5b, 0xeb, 0x5e, 0xd0, 0x87,
	0x1d, 0x98, 0x57, 0xe2, 0x1e, 0x8e, 0x42, 0xd2, 0x05, 0x15, 0x9f, 0x58, 0xba, 0xc1, 0xde, 0x28,
	0x9a, 0x24, 0xb3, 0xd3, 0x74, 0x1b, 0xe9, 0x75, 0x6d, 0xdf, 0x82, 0xcc, 0x93, 0x66, 0xf7, 0x10,
	0xe7, 0x10, 0x3b, 0xd5, 0xa0, 0x75, 0xb2, 0xe1, 0xc1, 0x7e, 0x97, 0x6a, 0x0b, 0xc6, 0x7d, 0x48,
	0xc2, 0x09, 0x96, 0xc9, 0x58, 0x9c, 0x3d, 0x40, 0x3f, 0x2c, 0x7a, 0xde, 0x14, 0x22, 0xae, 0xa1,
	0x97, 0x7b, 0x23, 0x8e, 0x53, 0xc9, 0x2a, 0xdd, 0x1d, 0x3b, 0x3c, 0xd9, 0x81, 0xee, 0xeb, 0xf8,
	0xdf, 0xe3, 0xdd, 0xc7, 0xed, 0x52, 0xb9, 0x95, 0x2f, 0xd2, 0x92, 0x9a, 0xec, 0x85, 0x68, 0xa9,
	0xf1, 0x49, 0x93, 0xaf, 0xde, 0xb5, 0x74, 0x35, 0xb5, 0x4d, 0x46, 0x8c, 0x66, 0x1a, 0xc2, 0x65,
	0xca, 0x38, 0x6c, 0x8d, 0xd4, 0x19, 0x17, 0xc5, 0x41, 0xe8, 0xf3, 0xe6, 0x27, 0x00, 0x00, 0xff,
	0xff, 0x37, 0xfe, 0x63, 0xd4, 0x9f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MatchFunctionClient is the client API for MatchFunction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MatchFunctionClient interface {
	// The assumption is that there will be one service for each MMF that is
	// being served.  Build your MMF in the appropriate serving harness, deploy it
	// to the K8s cluster with a unique service name, then connect to that service
	// and call 'Run()' to execute the fuction.
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
}

type matchFunctionClient struct {
	cc *grpc.ClientConn
}

func NewMatchFunctionClient(cc *grpc.ClientConn) MatchFunctionClient {
	return &matchFunctionClient{cc}
}

func (c *matchFunctionClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, "/api.MatchFunction/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchFunctionServer is the server API for MatchFunction service.
type MatchFunctionServer interface {
	// The assumption is that there will be one service for each MMF that is
	// being served.  Build your MMF in the appropriate serving harness, deploy it
	// to the K8s cluster with a unique service name, then connect to that service
	// and call 'Run()' to execute the fuction.
	Run(context.Context, *RunRequest) (*RunResponse, error)
}

func RegisterMatchFunctionServer(s *grpc.Server, srv MatchFunctionServer) {
	s.RegisterService(&_MatchFunction_serviceDesc, srv)
}

func _MatchFunction_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchFunctionServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MatchFunction/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchFunctionServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MatchFunction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.MatchFunction",
	HandlerType: (*MatchFunctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _MatchFunction_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protobuf-spec/matchfunction.proto",
}
