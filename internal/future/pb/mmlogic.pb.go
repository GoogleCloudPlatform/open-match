// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/mmlogic.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetPoolTicketsRequest struct {
	// The Pool representing the set of Filters to be queried.
	Pool                 *Pool    `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPoolTicketsRequest) Reset()         { *m = GetPoolTicketsRequest{} }
func (m *GetPoolTicketsRequest) String() string { return proto.CompactTextString(m) }
func (*GetPoolTicketsRequest) ProtoMessage()    {}
func (*GetPoolTicketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa9c8aeaf311764, []int{0}
}

func (m *GetPoolTicketsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPoolTicketsRequest.Unmarshal(m, b)
}
func (m *GetPoolTicketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPoolTicketsRequest.Marshal(b, m, deterministic)
}
func (m *GetPoolTicketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPoolTicketsRequest.Merge(m, src)
}
func (m *GetPoolTicketsRequest) XXX_Size() int {
	return xxx_messageInfo_GetPoolTicketsRequest.Size(m)
}
func (m *GetPoolTicketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPoolTicketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPoolTicketsRequest proto.InternalMessageInfo

func (m *GetPoolTicketsRequest) GetPool() *Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

type GetPoolTicketsResponse struct {
	// The Tickets that meet the Filter criteria requested by the Pool.
	Ticket               []*Ticket `protobuf:"bytes,1,rep,name=ticket,proto3" json:"ticket,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetPoolTicketsResponse) Reset()         { *m = GetPoolTicketsResponse{} }
func (m *GetPoolTicketsResponse) String() string { return proto.CompactTextString(m) }
func (*GetPoolTicketsResponse) ProtoMessage()    {}
func (*GetPoolTicketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa9c8aeaf311764, []int{1}
}

func (m *GetPoolTicketsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPoolTicketsResponse.Unmarshal(m, b)
}
func (m *GetPoolTicketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPoolTicketsResponse.Marshal(b, m, deterministic)
}
func (m *GetPoolTicketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPoolTicketsResponse.Merge(m, src)
}
func (m *GetPoolTicketsResponse) XXX_Size() int {
	return xxx_messageInfo_GetPoolTicketsResponse.Size(m)
}
func (m *GetPoolTicketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPoolTicketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPoolTicketsResponse proto.InternalMessageInfo

func (m *GetPoolTicketsResponse) GetTicket() []*Ticket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func init() {
	proto.RegisterType((*GetPoolTicketsRequest)(nil), "api.GetPoolTicketsRequest")
	proto.RegisterType((*GetPoolTicketsResponse)(nil), "api.GetPoolTicketsResponse")
}

func init() { proto.RegisterFile("api/mmlogic.proto", fileDescriptor_caa9c8aeaf311764) }

var fileDescriptor_caa9c8aeaf311764 = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xdf, 0x6a, 0x13, 0x4d,
	0x14, 0x67, 0x93, 0xd2, 0xf2, 0x4d, 0xe1, 0xc3, 0x0e, 0xb4, 0x84, 0x68, 0x71, 0x4c, 0x6f, 0x62,
	0x30, 0x3b, 0xe9, 0x1a, 0x14, 0x22, 0x01, 0x6b, 0x1b, 0x4a, 0x21, 0xd1, 0x12, 0xbd, 0xaa, 0x57,
	0x93, 0xd9, 0xd3, 0xdd, 0xd1, 0xdd, 0x39, 0xe3, 0xcc, 0x6c, 0xab, 0x88, 0x37, 0x7a, 0xe7, 0xa5,
	0x82, 0x17, 0x3e, 0x8f, 0x6f, 0xe0, 0x2b, 0x78, 0xe7, 0x4b, 0xc8, 0x6e, 0x0c, 0x55, 0x93, 0xab,
	0x61, 0x7f, 0x7f, 0xce, 0x39, 0xfb, 0x3b, 0x87, 0x6c, 0x09, 0xa3, 0x78, 0x9e, 0x67, 0x98, 0x28,
	0x19, 0x1a, 0x8b, 0x1e, 0x69, 0x5d, 0x18, 0xd5, 0xa4, 0x15, 0x0e, 0xce, 0x89, 0x04, 0xdc, 0x9c,
	0x68, 0xde, 0x48, 0x10, 0x93, 0x0c, 0x78, 0x49, 0x09, 0xad, 0xd1, 0x0b, 0xaf, 0x50, 0x2f, 0xd8,
	0x3b, 0xd5, 0x23, 0xbb, 0x09, 0xe8, 0xae, 0xbb, 0x14, 0x49, 0x02, 0x96, 0xa3, 0xa9, 0x14, 0xcb,
	0xea, 0xd6, 0x3d, 0xb2, 0x7d, 0x0c, 0xfe, 0x14, 0x31, 0x7b, 0xa6, 0xe4, 0x4b, 0xf0, 0x6e, 0x0a,
	0xaf, 0x0a, 0x70, 0x9e, 0xee, 0x92, 0x35, 0x83, 0x98, 0x35, 0x02, 0x16, 0xb4, 0x37, 0xa3, 0xff,
	0x42, 0x61, 0x54, 0x58, 0xca, 0xa6, 0x15, 0xdc, 0x1a, 0x92, 0x9d, 0x7f, 0x7d, 0xce, 0xa0, 0x76,
	0x40, 0xf7, 0xc8, 0xba, 0xaf, 0xa0, 0x46, 0xc0, 0xea, 0xed, 0xcd, 0x68, 0xb3, 0xb2, 0xce, 0x55,
	0xd3, 0xdf, 0x54, 0xf4, 0x25, 0x20, 0x1b, 0x93, 0x7c, 0x5c, 0xfe, 0x2d, 0xfd, 0x18, 0x90, 0xff,
	0xff, 0xae, 0x45, 0x9b, 0x95, 0x67, 0xe5, 0x60, 0xcd, 0xeb, 0x2b, 0xb9, 0x79, 0xf3, 0xd6, 0xf0,
	0xfd, 0xf7, 0x1f, 0x9f, 0x6b, 0xf7, 0x5b, 0x5b, 0xfc, 0x62, 0x7f, 0x11, 0x27, 0x2f, 0x07, 0x76,
	0x83, 0xa0, 0x73, 0x76, 0x93, 0xee, 0x2e, 0xe1, 0xfc, 0x6d, 0xf9, 0x84, 0x5a, 0xe4, 0xf0, 0xae,
	0x17, 0x3c, 0xfa, 0x50, 0xff, 0x74, 0xf0, 0xb3, 0x46, 0xbf, 0x05, 0x64, 0x7b, 0x32, 0x61, 0xd5,
	0x80, 0xac, 0x7d, 0x24, 0xbc, 0x60, 0x63, 0xf1, 0x06, 0xec, 0xed, 0xd6, 0x09, 0x21, 0x4f, 0x0c,
	0x68, 0x36, 0x11, 0x5e, 0xa6, 0x74, 0x27, 0xf5, 0xde, 0xb8, 0x01, 0xe7, 0x68, 0x40, 0x77, 0xf3,
	0x12, 0x0b, 0x63, 0xb8, 0x68, 0xee, 0x5d, 0x7d, 0x77, 0x63, 0xe5, 0x64, 0xe1, 0xdc, 0xc3, 0xf9,
	0xd6, 0x12, 0x8b, 0x85, 0x71, 0xa1, 0xc4, 0xbc, 0xf3, 0x9c, 0xd0, 0x03, 0x23, 0x64, 0x0a, 0x2c,
	0x0a, 0x7b, 0x6c, 0xac, 0x24, 0x94, 0xf9, 0x8d, 0x16, 0x25, 0x13, 0xe5, 0xd3, 0x62, 0x56, 0x2a,
	0xf9, 0x71, 0x65, 0x3d, 0xcc, 0xb0, 0x88, 0x4f, 0x33, 0xe1, 0xcf, 0xd1, 0xe6, 0x7f, 0x74, 0xe4,
	0xb3, 0x0c, 0x67, 0x3c, 0x17, 0xce, 0x83, 0xe5, 0xe3, 0x93, 0xc3, 0xd1, 0xe3, 0xa7, 0xa3, 0xa8,
	0xbe, 0x1f, 0xf6, 0x3a, 0xb5, 0xa0, 0x16, 0x5d, 0x13, 0xc6, 0x64, 0x4a, 0x56, 0x5b, 0xe7, 0x2f,
	0x1c, 0xea, 0xc1, 0x12, 0x32, 0x7d, 0x40, 0xea, 0xfd, 0x5e, 0x9f, 0xf6, 0x49, 0x67, 0x0a, 0xbe,
	0xb0, 0x1a, 0x62, 0x76, 0x99, 0x82, 0x66, 0x3e, 0x05, 0x66, 0xc1, 0x61, 0x61, 0x25, 0xb0, 0x18,
	0xc1, 0x31, 0x8d, 0x9e, 0xc1, 0x6b, 0xe5, 0x7c, 0x48, 0xd7, 0xc9, 0xda, 0xd7, 0x5a, 0xb0, 0x61,
	0x87, 0xa4, 0x71, 0x95, 0x08, 0x3b, 0x42, 0x59, 0xe4, 0xa0, 0xe7, 0x57, 0x46, 0x6f, 0xad, 0xce,
	0x87, 0x3b, 0xe5, 0x81, 0xc7, 0x28, 0x1d, 0x3f, 0xa3, 0x4a, 0x7b, 0xb0, 0x5a, 0x64, 0xfc, 0xbc,
	0xf0, 0x85, 0x05, 0x6e, 0x66, 0xb3, 0xf5, 0xea, 0x38, 0xef, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff,
	0xbf, 0xc5, 0x26, 0x7e, 0x16, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MmLogicClient is the client API for MmLogic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MmLogicClient interface {
	// GetPoolTickets gets the list of Tickets that match every Filter in the
	// specified Pool.
	// Right now there's a GET and a POST for this verb.
	GetPoolTickets(ctx context.Context, in *GetPoolTicketsRequest, opts ...grpc.CallOption) (MmLogic_GetPoolTicketsClient, error)
}

type mmLogicClient struct {
	cc *grpc.ClientConn
}

func NewMmLogicClient(cc *grpc.ClientConn) MmLogicClient {
	return &mmLogicClient{cc}
}

func (c *mmLogicClient) GetPoolTickets(ctx context.Context, in *GetPoolTicketsRequest, opts ...grpc.CallOption) (MmLogic_GetPoolTicketsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MmLogic_serviceDesc.Streams[0], "/api.MmLogic/GetPoolTickets", opts...)
	if err != nil {
		return nil, err
	}
	x := &mmLogicGetPoolTicketsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MmLogic_GetPoolTicketsClient interface {
	Recv() (*GetPoolTicketsResponse, error)
	grpc.ClientStream
}

type mmLogicGetPoolTicketsClient struct {
	grpc.ClientStream
}

func (x *mmLogicGetPoolTicketsClient) Recv() (*GetPoolTicketsResponse, error) {
	m := new(GetPoolTicketsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MmLogicServer is the server API for MmLogic service.
type MmLogicServer interface {
	// GetPoolTickets gets the list of Tickets that match every Filter in the
	// specified Pool.
	// Right now there's a GET and a POST for this verb.
	GetPoolTickets(*GetPoolTicketsRequest, MmLogic_GetPoolTicketsServer) error
}

func RegisterMmLogicServer(s *grpc.Server, srv MmLogicServer) {
	s.RegisterService(&_MmLogic_serviceDesc, srv)
}

func _MmLogic_GetPoolTickets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPoolTicketsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MmLogicServer).GetPoolTickets(m, &mmLogicGetPoolTicketsServer{stream})
}

type MmLogic_GetPoolTicketsServer interface {
	Send(*GetPoolTicketsResponse) error
	grpc.ServerStream
}

type mmLogicGetPoolTicketsServer struct {
	grpc.ServerStream
}

func (x *mmLogicGetPoolTicketsServer) Send(m *GetPoolTicketsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _MmLogic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.MmLogic",
	HandlerType: (*MmLogicServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPoolTickets",
			Handler:       _MmLogic_GetPoolTickets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/mmlogic.proto",
}
