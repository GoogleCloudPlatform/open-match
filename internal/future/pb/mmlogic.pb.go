// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/mmlogic.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type QueryTicketsRequest struct {
	// The Pool representing the set of Filters to be queried.
	Pool                 *Pool    `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryTicketsRequest) Reset()         { *m = QueryTicketsRequest{} }
func (m *QueryTicketsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTicketsRequest) ProtoMessage()    {}
func (*QueryTicketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa9c8aeaf311764, []int{0}
}

func (m *QueryTicketsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryTicketsRequest.Unmarshal(m, b)
}
func (m *QueryTicketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryTicketsRequest.Marshal(b, m, deterministic)
}
func (m *QueryTicketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTicketsRequest.Merge(m, src)
}
func (m *QueryTicketsRequest) XXX_Size() int {
	return xxx_messageInfo_QueryTicketsRequest.Size(m)
}
func (m *QueryTicketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTicketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTicketsRequest proto.InternalMessageInfo

func (m *QueryTicketsRequest) GetPool() *Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

type QueryTicketsResponse struct {
	// The Tickets that meet the Filter criteria requested by the Pool.
	Ticket               []*Ticket `protobuf:"bytes,1,rep,name=ticket,proto3" json:"ticket,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *QueryTicketsResponse) Reset()         { *m = QueryTicketsResponse{} }
func (m *QueryTicketsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTicketsResponse) ProtoMessage()    {}
func (*QueryTicketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa9c8aeaf311764, []int{1}
}

func (m *QueryTicketsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryTicketsResponse.Unmarshal(m, b)
}
func (m *QueryTicketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryTicketsResponse.Marshal(b, m, deterministic)
}
func (m *QueryTicketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTicketsResponse.Merge(m, src)
}
func (m *QueryTicketsResponse) XXX_Size() int {
	return xxx_messageInfo_QueryTicketsResponse.Size(m)
}
func (m *QueryTicketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTicketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTicketsResponse proto.InternalMessageInfo

func (m *QueryTicketsResponse) GetTicket() []*Ticket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryTicketsRequest)(nil), "api.QueryTicketsRequest")
	proto.RegisterType((*QueryTicketsResponse)(nil), "api.QueryTicketsResponse")
}

func init() { proto.RegisterFile("api/mmlogic.proto", fileDescriptor_caa9c8aeaf311764) }

var fileDescriptor_caa9c8aeaf311764 = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xcd, 0x6e, 0xd3, 0x4e,
	0x10, 0x97, 0x93, 0xaa, 0xd5, 0x7f, 0xf3, 0x3f, 0xc0, 0xf2, 0xa1, 0x34, 0x02, 0xb4, 0xa4, 0x1c,
	0x42, 0x44, 0xbc, 0xa9, 0xc9, 0x29, 0x15, 0x12, 0xa5, 0x8d, 0x50, 0xa5, 0x04, 0x4a, 0xe0, 0x04,
	0xa7, 0xcd, 0x7a, 0x6a, 0x2f, 0xb5, 0x77, 0xb6, 0xbb, 0xeb, 0x94, 0x5e, 0xe1, 0x0d, 0xe0, 0xc6,
	0xf3, 0xf0, 0x06, 0xbc, 0x02, 0x37, 0x5e, 0x02, 0xd9, 0x26, 0x6a, 0x51, 0x73, 0xb2, 0xfc, 0xfb,
	0x98, 0x99, 0xfd, 0xcd, 0x90, 0x9b, 0xc2, 0x28, 0x9e, 0xe7, 0x19, 0x26, 0x4a, 0x86, 0xc6, 0xa2,
	0x47, 0xda, 0x14, 0x46, 0x75, 0x68, 0x85, 0x83, 0x73, 0x22, 0x01, 0x57, 0x13, 0x9d, 0x7b, 0x09,
	0x62, 0x92, 0x01, 0x2f, 0x29, 0xa1, 0x35, 0x7a, 0xe1, 0x15, 0xea, 0x15, 0xfb, 0xa4, 0xfa, 0xc8,
	0x41, 0x02, 0x7a, 0xe0, 0xce, 0x45, 0x92, 0x80, 0xe5, 0x68, 0x2a, 0xc5, 0x75, 0x75, 0x77, 0x44,
	0x6e, 0xbd, 0x29, 0xc0, 0x5e, 0xbc, 0x53, 0xf2, 0x14, 0xbc, 0x9b, 0xc3, 0x59, 0x01, 0xce, 0xd3,
	0xfb, 0x64, 0xc3, 0x20, 0x66, 0xed, 0x80, 0x05, 0xbd, 0x56, 0xf4, 0x5f, 0x28, 0x8c, 0x0a, 0x8f,
	0x11, 0xb3, 0x79, 0x05, 0x77, 0xf7, 0xc8, 0xed, 0x7f, 0x5d, 0xce, 0xa0, 0x76, 0x40, 0x77, 0xc8,
	0xa6, 0xaf, 0xa0, 0x76, 0xc0, 0x9a, 0xbd, 0x56, 0xd4, 0xaa, 0x8c, 0xb5, 0x6a, 0xfe, 0x97, 0x8a,
	0x96, 0x64, 0x6b, 0x96, 0x4f, 0xcb, 0x87, 0xd2, 0x53, 0xf2, 0xff, 0xd5, 0x3a, 0xb4, 0x5d, 0xe9,
	0xd7, 0x0c, 0xd4, 0xd9, 0x5e, 0xc3, 0xd4, 0x4d, 0xbb, 0x8f, 0x3e, 0xff, 0xfc, 0xf5, 0xad, 0xf1,
	0xa0, 0xbb, 0xcd, 0x97, 0xbb, 0xab, 0x08, 0x79, 0xdd, 0xcb, 0x8d, 0xcf, 0x4a, 0xc7, 0x38, 0xe8,
	0x0f, 0x83, 0x17, 0x5f, 0x9a, 0x5f, 0xf7, 0x7f, 0x37, 0xe8, 0x8f, 0x80, 0xdc, 0x99, 0xcd, 0x58,
	0x35, 0x00, 0xeb, 0x1d, 0x0a, 0x2f, 0xd8, 0x54, 0x5c, 0x80, 0x7d, 0xdc, 0x3d, 0x22, 0xe4, 0xb5,
	0x01, 0xcd, 0x66, 0xc2, 0xcb, 0x94, 0xde, 0x4d, 0xbd, 0x37, 0x6e, 0xcc, 0x39, 0x1a, 0xd0, 0x83,
	0xbc, 0xc4, 0xc2, 0x18, 0x96, 0x9d, 0x9d, 0xcb, 0xff, 0x41, 0xac, 0x9c, 0x2c, 0x9c, 0x7b, 0x5e,
	0x2f, 0x24, 0xb1, 0x58, 0x18, 0x17, 0x4a, 0xcc, 0xfb, 0x1f, 0x08, 0xdd, 0x37, 0x42, 0xa6, 0xc0,
	0xa2, 0x70, 0xc8, 0xa6, 0x4a, 0x42, 0x19, 0xcf, 0x64, 0x55, 0x32, 0x51, 0x3e, 0x2d, 0x16, 0xa5,
	0x92, 0xbf, 0xac, 0xac, 0x07, 0x19, 0x16, 0xf1, 0x71, 0x26, 0xfc, 0x09, 0xda, 0xfc, 0x4a, 0x47,
	0xbe, 0xc8, 0x70, 0xc1, 0x73, 0xe1, 0x3c, 0x58, 0x3e, 0x3d, 0x3a, 0x98, 0xbc, 0x7a, 0x3b, 0x89,
	0x9a, 0xbb, 0xe1, 0xb0, 0xdf, 0x08, 0x1a, 0xd1, 0x0d, 0x61, 0x4c, 0xa6, 0x64, 0xb5, 0x50, 0xfe,
	0xd1, 0xa1, 0x1e, 0x5f, 0x43, 0xe6, 0x7b, 0xa4, 0x39, 0x1a, 0x8e, 0xe8, 0x88, 0xf4, 0xe7, 0xe0,
	0x0b, 0xab, 0x21, 0x66, 0xe7, 0x29, 0x68, 0xe6, 0x53, 0x60, 0x16, 0x1c, 0x16, 0x56, 0x02, 0x8b,
	0x11, 0x1c, 0xd3, 0xe8, 0x19, 0x7c, 0x52, 0xce, 0x87, 0x74, 0x93, 0x6c, 0x7c, 0x6f, 0x04, 0x5b,
	0xf6, 0x19, 0x69, 0x5f, 0x26, 0xc2, 0x0e, 0x51, 0x16, 0x39, 0xe8, 0xfa, 0x80, 0xe8, 0xc3, 0xf5,
	0xf9, 0x70, 0xa7, 0x3c, 0xf0, 0x18, 0xa5, 0xe3, 0xef, 0xa9, 0xd2, 0x1e, 0xac, 0x16, 0x19, 0x3f,
	0x29, 0x7c, 0x61, 0x81, 0x9b, 0xc5, 0x62, 0xb3, 0xba, 0xbb, 0xa7, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xa1, 0x22, 0x19, 0x7a, 0xf1, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MmLogicClient is the client API for MmLogic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MmLogicClient interface {
	// QueryTickets gets the list of Tickets that match every Filter in the
	// specified Pool.
	QueryTickets(ctx context.Context, in *QueryTicketsRequest, opts ...grpc.CallOption) (MmLogic_QueryTicketsClient, error)
}

type mmLogicClient struct {
	cc *grpc.ClientConn
}

func NewMmLogicClient(cc *grpc.ClientConn) MmLogicClient {
	return &mmLogicClient{cc}
}

func (c *mmLogicClient) QueryTickets(ctx context.Context, in *QueryTicketsRequest, opts ...grpc.CallOption) (MmLogic_QueryTicketsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MmLogic_serviceDesc.Streams[0], "/api.MmLogic/QueryTickets", opts...)
	if err != nil {
		return nil, err
	}
	x := &mmLogicQueryTicketsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MmLogic_QueryTicketsClient interface {
	Recv() (*QueryTicketsResponse, error)
	grpc.ClientStream
}

type mmLogicQueryTicketsClient struct {
	grpc.ClientStream
}

func (x *mmLogicQueryTicketsClient) Recv() (*QueryTicketsResponse, error) {
	m := new(QueryTicketsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MmLogicServer is the server API for MmLogic service.
type MmLogicServer interface {
	// QueryTickets gets the list of Tickets that match every Filter in the
	// specified Pool.
	QueryTickets(*QueryTicketsRequest, MmLogic_QueryTicketsServer) error
}

func RegisterMmLogicServer(s *grpc.Server, srv MmLogicServer) {
	s.RegisterService(&_MmLogic_serviceDesc, srv)
}

func _MmLogic_QueryTickets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryTicketsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MmLogicServer).QueryTickets(m, &mmLogicQueryTicketsServer{stream})
}

type MmLogic_QueryTicketsServer interface {
	Send(*QueryTicketsResponse) error
	grpc.ServerStream
}

type mmLogicQueryTicketsServer struct {
	grpc.ServerStream
}

func (x *mmLogicQueryTicketsServer) Send(m *QueryTicketsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _MmLogic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.MmLogic",
	HandlerType: (*MmLogicServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryTickets",
			Handler:       _MmLogic_QueryTickets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/mmlogic.proto",
}
