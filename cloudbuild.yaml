# Copyright 2019 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################################
#                   Open Match Script for Google Cloud Build                   #
################################################################################

# To run this locally:
# cloud-build-local --config=cloudbuild.yaml --dryrun=false --substitutions=_OM_VERSION=DEV .
# To run this remotely:
# gcloud builds submit --config=cloudbuild.yaml --substitutions=_OM_VERSION=DEV .

# Requires gcloud to be installed to work. (https://cloud.google.com/sdk/)
# gcloud auth login
# gcloud components install cloud-build-local

# This YAML contains all the build steps for building Open Match.
# All PRs are verified against this script to prevent build breakages and regressions.

# Conventions
# Each build step is ID'ed with "Prefix: Description".
#   The prefix portion determines what kind of step it is and it's impact.
#   Docker Image: Read-Only, outputs a docker image.
#   Lint: Read-Only, verifies correctness and formatting of a file.
#   Build: Read-Write, outputs a build artifact. Ok to run in parallel if the artifact will not collide with another one.
#   Generate: Read-Write, outputs files within /workspace that are used in other build step. Do not run these in parallel.
#   Setup: Read-Write, similar to generate but steps that run before any other step.

# Some useful things to know about Cloud Build.
# The root of this repository is always stored in /workspace.
#    Any modifications that occur within /workspace are persisted between builds anything else is forgotten.
# If a build step has intermediate files that need to be persisted for a future step then use volumes.
#    An example of this is the go-vol which is where the pkg/ data for go mod is stored.
#    More information here: https://cloud.google.com/cloud-build/docs/build-config#build_steps
# A build step is basically a docker image that is tuned for Cloud Build,
#    https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/go

steps:
- id: 'Docker Image: open-match-build'
  name: gcr.io/cloud-builders/docker
  args: ['build', '-t', 'open-match-build', '-f', 'Dockerfile', '.']
  waitFor: ['-']
# '--build-arg', 'GCP_PROJECT_ID=$PROJECT_ID', 
- id: 'Build: Clean'
  name: open-match-build
  args: ['make', 'clean']
  waitFor: ['Docker Image: open-match-build']

- id: 'Setup: Download Dependencies'
  name: open-match-build
  args: ['make', 'sync-deps']
  volumes:
  - name: 'go-vol'
    path: '/go'
  waitFor: ['Build: Clean']

- id: 'Build: Install Toolchain'
  name: open-match-build
  args: ['make', 'install-toolchain']
  volumes:
  - name: 'go-vol'
    path: '/go'
  waitFor: ['Setup: Download Dependencies']

- id: 'Build: Protocol Buffers'
  name: open-match-build
  args: ['make', 'all-protos']
  volumes:
  - name: 'go-vol'
    path: '/go'
  waitFor: ['Build: Install Toolchain']

- id: 'Lint: Format'
  name: open-match-build
  args: ['make', 'fmt']
  volumes:
  - name: 'go-vol'
    path: '/go'
  waitFor: ['Build: Protocol Buffers']
- id: 'Lint: Vet'
  name: open-match-build
  args: ['make', 'vet']
  volumes:
  - name: 'go-vol'
    path: '/go'
  waitFor: ['Build: Protocol Buffers']
- id: 'Build: Binaries'
  name: open-match-build
  args: ['make', 'all']
  volumes:
  - name: 'go-vol'
    path: '/go'
  waitFor: ['Build: Protocol Buffers']
- id: 'Build: Test'
  name: open-match-build
  args: ['make', 'test-10']
  volumes:
  - name: 'go-vol'
    path: '/go'
  waitFor: ['Build: Protocol Buffers']
- id: 'Build: Website'
  name: open-match-build
  args: ['make', 'build/site/']
  volumes:
  - name: 'go-vol'
    path: '/go'
  waitFor: ['Build: Protocol Buffers']
- id: 'Build: Docker Images'
  name: open-match-build
  args: ['make', 'build-images', '-j4']
  waitFor: ['Build: Protocol Buffers']
- id: 'Build: Push Images'
  name: open-match-build
  args: ['make', 'push-images', '-j4']
  waitFor: ['Build: Docker Images']

#- id: 'Deploy: Create Cluster'
#  name: open-match-build
#  args: ['make', 'create-gke-cluster', 'push-helm']
#  waitFor: ['Build: Docker Images']

#- id: 'Deploy: Install Charts'
#  name: open-match-build
#  args: ['make', 'sleep-10', 'install-chart', 'install-example-chart']
#  waitFor: ['Deploy: Create Cluster']
  
#- id: 'Deploy: Teardown Cluster'
#  name: open-match-build
#  args: ['make', 'sleep-10', 'delete-gke-cluster']
#  waitFor: ['Deploy: Install Charts']

artifacts:
    objects:
        location: gs://open-match-build-artifacts/output/
        paths:
            - cmd/backendapi/backendapi
            - cmd/frontendapi/frontendapi
            - cmd/mmforc/mmforc
            - cmd/mmlogicapi/mmlogicapi
            - examples/functions/golang/manual-simple/manual-simple
            - examples/backendclient/backendclient
            - test/cmd/clientloadgen/clientloadgen
            - test/cmd/frontendclient/frontendclient
images:
- 'gcr.io/$PROJECT_ID/openmatch-backendapi:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-frontendapi:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-mmforc:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-mmlogicapi:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-evaluator-simple:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-mmf-cs-mmlogic-simple:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-mmf-go-mmlogic-simple:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-mmf-php-mmlogic-simple:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-mmf-py3-mmlogic-simple:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-backendclient:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-clientloadgen:${_OM_VERSION}-${SHORT_SHA}'
- 'gcr.io/$PROJECT_ID/openmatch-frontendclient:${_OM_VERSION}-${SHORT_SHA}'
substitutions:
    _OM_VERSION: 0.4.0
logsBucket: 'gs://open-match-build-logs/'
options:
  sourceProvenanceHash: ['SHA256']
  machineType: 'N1_HIGHCPU_8'
# TODO: The build is slow because we don't vendor. go get takes a very long time.
# Also we are rebuilding a lot of code unnecessarily. This should improve once
# we have new hermetic and reproducible Dockerfiles.
timeout: 1200s
# TODO Build Steps
# api/protobuf-spec/*: Build Protocol Buffers (golang, python, php)
# config/matchmaker_config.yaml: Lint this file so it's verified as a valid YAML file.
# deployments/k8s: Verify with kubelint.
# examples/profiles/*.json: Verify valid JSON files.
#
# Consolidate many of these build steps via Makefile.
# Caching of dependencies is a serious problem. Cloud Build does not complete within 20 minutes!

